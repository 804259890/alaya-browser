package com.platon.browser.util.decode;

import com.platon.browser.elasticsearch.dto.Transaction;
import com.platon.browser.param.OthersTxParam;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.bouncycastle.util.encoders.Hex;
import org.web3j.rlp.RlpDecoder;
import org.web3j.rlp.RlpList;
import org.web3j.rlp.RlpString;
import org.web3j.rlp.RlpType;

import java.math.BigInteger;
import java.util.List;

/**
 * 交易参数解析器
 * User: dongqile
 * Date: 2019/1/9
 * Time: 11:46
 */
@Slf4j
public class TxInputUtil {
    public static DecodedResult decode(String txInput) {
        DecodedResult result = new DecodedResult();
        try {
            if (StringUtils.isNotEmpty(txInput) && !txInput.equals("0x")) {
                RlpList rlpList = RlpDecoder.decode(Hex.decode(txInput.replace("0x", "")));
                List <RlpType> rlpTypes = rlpList.getValues();

                if(rlpTypes.size() == 1 && rlpTypes.get(0).getClass().equals(RlpString.class)) {
                    result.setParam(OthersTxParam.builder().data(((RlpString)rlpTypes.get(0)).asString()).build());
                    return result;
                }

                RlpList rootList = (RlpList) rlpTypes.get(0);

                RlpString rlpString = (RlpString) rootList.getValues().get(0);
                RlpList rlpList2 = RlpDecoder.decode(rlpString.getBytes());
                RlpString rl = (RlpString) rlpList2.getValues().get(0);
                BigInteger txCode = new BigInteger(1, rl.getBytes());



                Transaction.TypeEnum typeEnum = Transaction.TypeEnum.getEnum(txCode.intValue());
                result.setTypeEnum(typeEnum);
                switch (typeEnum) {
                    case STAKE_CREATE: // 1000 发起质押
                        return result.setParam(StakeCreateDecoder.decode(rootList));
                    case STAKE_MODIFY: // 1001 修改质押
                        return result.setParam(StakeModifyDecoder.decode(rootList));
                    case STAKE_INCREASE: // 1002 增持质押
                        return result.setParam(StakeIncreaseDecoder.decode(rootList));
                    case STAKE_EXIT: // 1003 撤销质押
                        return result.setParam(StakeExitDecoder.decode(rootList));
                    case DELEGATE_CREATE: // 1004 发起委托
                        return result.setParam(DelegateCreateDecoder.decode(rootList));
                    case DELEGATE_EXIT: // 1005 减持/撤销委托
                        return result.setParam(DelegateExitDecoder.decode(rootList));
                    case PROPOSAL_TEXT: // 2000 提交文本提案
                        return result.setParam(ProposalTextDecoder.decode(rootList));
                    case PROPOSAL_UPGRADE: // 2001 提交升级提案
                        return result.setParam(ProposalUpgradeDecoder.decode(rootList));
                    case PROPOSAL_CANCEL: // 2005 提交取消提案
                        return result.setParam(ProposalCancelDecoder.decode(rootList));
                    case PROPOSAL_VOTE: // 2003 给提案投票
                        return result.setParam(ProposalVoteDecoder.decode(rootList));
                    case VERSION_DECLARE: // 2004 版本声明
                        return result.setParam(VersionDeclareDecoder.decode(rootList));
                    case REPORT: // 3000 举报双签
                        return result.setParam(ReportDecoder.decode(rootList));
                    case RESTRICTING_CREATE: // 4000 创建锁仓计划
                        return result.setParam(RestrictingCreateDecoder.decode(rootList));
				default:
					break;
                }
            }
        } catch (Exception e) {
            log.error("解析交易输入出错:",e);
        }
        return result;
    }

    public static void main ( String[] args ) {
        String date = "0xf906ac83820bb801b906a4b906a1227b5c2270726570617265415c223a7b5c2265706f63685c223a302c5c22766965774e756d6265725c223a302c5c22626c6f636b486173685c223a5c223078663730363333393936363366396332393335366639643435373232626363383661643830383535383138366130643633353834613839663861343065363033345c222c5c22626c6f636b4e756d6265725c223a33393534392c5c22626c6f636b496e6465785c223a302c5c22626c6f636b446174615c223a5c223078363664373366616233353935353436343834656530306130633761663262333638313637323964303432633766623233393265633866623439643864316135645c222c5c2276616c69646174654e6f64655c223a7b5c22696e6465785c223a302c5c22616464726573735c223a5c223078373234653031633137646266333133356439646637653562386363636134313966313833373365635c222c5c226e6f646549645c223a5c2266663430616334323032373964646265353865316266316366653139663462353937386638366537633438333232336265323665383061633937393065383535636235643762643734336439346239626437326265373966303165653036386263316665666537396330366261396364343966613936663532633762646365305c222c5c22626c735075624b65795c223a5c223762326132663162376261373561623338316662303665336336636130396264613961333465663138376233303936316366376239646233353338353136643035376434353533343339613463653561373836303835653962656635613431393565386437663436616665306336643465366235633839346461343066666232646563376266313834666537383464643431313764656165323635333034306462313230633834366363326264353233626139393832306634366161626331305c227d2c5c227369676e61747572655c223a5c22307865326661386665663937663533373837316335386264643737393239366463333366333566346236313936323139396533613830633832396534623931366336656662373062643937646566663639316239306138613332396337633761383830303030303030303030303030303030303030303030303030303030303030305c227d2c5c2270726570617265425c223a7b5c2265706f63685c223a302c5c22766965774e756d6265725c223a302c5c22626c6f636b486173685c223a5c223078323564306333303461323363616437383661333734646337386363336433666430663038313134316364373536386430616538386338643066326366623766635c222c5c22626c6f636b4e756d6265725c223a33393534392c5c22626c6f636b496e6465785c223a302c5c22626c6f636b446174615c223a5c223078336166396465643663366561636466303337333937323233663965356131386366346532326364323633323530343538663566363463656232366566366266635c222c5c2276616c69646174654e6f64655c223a7b5c22696e6465785c223a302c5c22616464726573735c223a5c223078373234653031633137646266333133356439646637653562386363636134313966313833373365635c222c5c226e6f646549645c223a5c2266663430616334323032373964646265353865316266316366653139663462353937386638366537633438333232336265323665383061633937393065383535636235643762643734336439346239626437326265373966303165653036386263316665666537396330366261396364343966613936663532633762646365305c222c5c22626c735075624b65795c223a5c223762326132663162376261373561623338316662303665336336636130396264613961333465663138376233303936316366376239646233353338353136643035376434353533343339613463653561373836303835653962656635613431393565386437663436616665306336643465366235633839346461343066666232646563376266313834666537383464643431313764656165323635333034306462313230633834366363326264353233626139393832306634366161626331305c227d2c5c227369676e61747572655c223a5c22307831323362633962346664363836396635393536663439393233326233613861373338353736323631336432323830643334633164396338363338323964393634333736393062313662323230333361356564363563353964366136323938386630303030303030303030303030303030303030303030303030303030303030305c227d7d22";
        DecodedResult res = TxInputUtil.decode(date);
        log.info("{}",res.getParam().toJSONString());
    }
}
