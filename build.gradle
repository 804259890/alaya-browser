
group = 'com.platon.browser'
version = "${projectVersion}"
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory
buildscript {
  repositories {
    maven {url "https://plugins.gradle.org/m2/"}
    maven {url "https://mvnrepository.com/artifact/"}
  }
  dependencies {
    classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7.1")
    classpath 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.11.1'
  }
}

/*=====================API生成配置 START=======================*/
def apiDefDir = file(projectDir.path+"/docs/apidef")
files(apiDefDir.listFiles(new FilenameFilter() {
    boolean accept(File dir, String name) {
        return name.endsWith(".yml")
    }
})).each{yml ->
    println yml.name
    def json = yamlToJson(yml.text)
    def jsonFile = file(apiDefDir.path+"/"+yml.name+".json")
    jsonFile.write(json,"utf-8")
}

static yamlToJson(String yaml) {
    ObjectMapper yamlReader = new ObjectMapper(new YAMLFactory());
    Object obj = yamlReader.readValue(yaml, Object.class);
    ObjectMapper jsonWriter = new ObjectMapper();
    return jsonWriter.writerWithDefaultPrettyPrinter().writeValueAsString(obj);
}
/*=====================API生成配置 END=======================*/

apply plugin: "org.sonarqube"

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
    }
}

subprojects {
    def shortCommitId = 'git log -1 --pretty=%h'.execute([], project.rootDir).text.trim()

    // 设置编译器使用的编码
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    apply plugin: 'java'
    apply plugin: 'jacoco'

    group 'com.platon.browser'
    version "${projectVersion}"
    version "$projectVersion-$shortCommitId"
    sourceCompatibility = '1.8'

    repositories {
        maven {url "http://maven.aliyun.com/nexus/content/groups/public/"}
        maven {url "https://sdk.platon.network/nexus/content/groups/public/"}
        mavenCentral()
    }

    dependencies {
        testCompile "junit:junit:$junitVersion"
        testCompile "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        compile "com.alibaba:fastjson:$fastJsonVersion"
        compile "org.apache.commons:commons-lang3:$commonLang3Version"
        compile "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        compile "commons-io:commons-io:$commonIoVersion"
        compile "redis.clients:jedis:$jedisVersion"
        testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.2'
        testCompile group: 'org.powermock', name: 'powermock-api-easymock', version: '2.0.2'
        testCompile group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.2'
        testCompile group: 'org.powermock', name: 'powermock-core', version: '2.0.2'

        compile ("org.elasticsearch.client:elasticsearch-rest-high-level-client:$elasticSearchVersion"){
            exclude module: 'elasticsearch'
            exclude module: 'elasticsearch-rest-client'
        }
        compile "org.elasticsearch:elasticsearch:$elasticSearchVersion"
        compile ("org.elasticsearch.client:elasticsearch-rest-client:$elasticSearchVersion"){
            exclude module: 'httpclient'
            exclude module: 'httpcore'
            exclude module: 'httpasyncclient'
            exclude module: 'httcore-nio'
        }
        compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.10'
        compile group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.12'
        compile group: 'org.apache.httpcomponents', name: 'httpasyncclient', version: '4.1.4'
        compile group: 'org.apache.httpcomponents', name: 'httpcore-nio', version: '4.4.12'

        compile group: 'org.springframework.retry', name: 'spring-retry', version: '1.2.4.RELEASE'
        testCompile group: 'org.hsqldb', name: 'hsqldb', version: '2.5.0'
        compile group: 'org.yaml', name: 'snakeyaml', version: '1.27'
        compile 'cn.hutool:hutool-all:5.5.7'
    }

    // 配置文件更新&生成
    def bootApps = ['browser-agent','browser-api','browser-export','browser-press','browser-sync']
    if(project.name in bootApps){
        def desc='通用配置: 请不要修改此文件，此文件由模板自动生成，若要修改，请移步至conftpl目录'
        def tplPath="${projectDir.path}/conftpl/"
        def mainRes="${projectDir.path}/src/main/resources/"
        def testRes="${projectDir.path}/src/test/resources/"
        def tpl = file(projectDir.path+"/conftpl/application.yml")
        if(tpl.exists()){
            def txt = tpl.text.replace('_VERSION_',"$projectVersion").replace('_DESCRIPTION_',desc)
            file("${mainRes}application.yml").write(txt,"utf-8")
            file("${testRes}application.yml").write(txt,"utf-8")
        }

        tpl = file("${tplPath}application-dev.yml")
        if(tpl.exists()){
            def txt = tpl.text.replace('_VERSION_',"$projectVersion").replace('_DESCRIPTION_',desc)
                    .replace('_DB_HOST_',"$dbHost")
                    .replace('_DB_PORT_',"$dbPort")
                    .replace('_DB_NAME_',"$dbName")
                    .replace('_DB_USER_',"$dbUser")
                    .replace('_DB_PASS_',"$dbPass")
                    .replace('_REDIS_IPS_',"$redisIps")
                    .replace('_REDIS_PWD_',"$redisPwd")
                    .replace('_REDIS_DB_',"$redisDb")
                    .replace('_ES_IPS_',"$esIps")
                    .replace('_ES_PORT_',"$esPort")
                    .replace('_ES_USER_',"$esUser")
                    .replace('_ES_PWD_',"$esPwd")
            file("${mainRes}application-dev.yml").write(txt,"utf-8")
            file("${testRes}application-dev.yml").write(txt,"utf-8")
        }
    }

    def releaseApps = ['browser-agent','browser-api']
    if(project.name in releaseApps){
        apply plugin: 'distribution' //打包tar包用到的插件
        // 复制配置文件
        task copyConf(type: Copy) {
            from('src/main/resources/application-prod.yml')
            from('jasypt.properties')
            from('status.hook')
            from('build/libs')
            into('build/package')
            doLast {
                def scriptDir="../scripts/"
                def resetTpl=file("${scriptDir}/reset.tpl.sh"),startTpl=file("${scriptDir}/start.tpl.sh")
                def stopTpl=file("${scriptDir}/stop.tpl.sh")
                if(resetTpl.exists()) file("build/package/reset.sh").write(
                    resetTpl.text
                    .replace('_VERSION_',"$projectVersion")
                    .replace('_PROFILE_',"dev")
                    .replace('_DB_HOST_',"$dbHost")
                    .replace('_DB_USER_',"$dbUser")
                    .replace('_DB_PASS_',"$dbPass")
                    ,"utf-8")
                if(startTpl.exists()) file("build/package/start.sh").write(startTpl.text.replace('_PROJECT_NAME_',project.name),"utf-8")
                if(stopTpl.exists()) file("build/package/stop.sh").write(stopTpl.text.replace('_PROJECT_NAME_',project.name),"utf-8")
                def fullSql=file("${scriptDir}/${project.parent.name}-${projectVersion}.all.sql")
                if(fullSql.exists()) file("build/package/${project.parent.name}-${projectVersion}.all.sql").write(fullSql.text,"utf-8")
                def upgradeSql=file("${scriptDir}/${project.parent.name}-${projectVersion}.upgrade.sql")
                if(upgradeSql.exists()) file("build/package/${project.parent.name}-${projectVersion}.upgrade.sql").write(upgradeSql.text,"utf-8")
            }
        }

        distributions {
            monitor {
                baseName = project.name
                contents {
                    from { 'build/package' }
                }
            }
        }

        monitorDistTar.dependsOn  'copyConf'
        monitorDistTar.compression = Compression.GZIP
        monitorDistTar.extension = 'tar.gz'

        task buildTar(dependsOn: [
                'build',
                copyConf
        ]){}
    }

    //sonar扫描的路径
    sonarqube {
        properties {
            property "sonar.sources", "src/main/java"
        }
    }

    //jacoco测试报表的功能
    jacocoTestReport {
	    reports {
	        xml.enabled true
	        html.enabled true
	    }
	}

	jacocoTestCoverageVerification {
		violationRules {
			rule {
				limit {
					minimum = 0.7
				}
			}
		}
	 }

	check.dependsOn jacocoTestReport
}