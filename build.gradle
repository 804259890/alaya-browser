group = 'com.platon.browser'
version = "${projectVersion}"

buildscript {
  repositories {
    maven {url "https://plugins.gradle.org/m2/"}
    maven {url "https://mvnrepository.com/artifact/"}
  }
  dependencies {
    classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7.1")
  }
}

apply plugin: "org.sonarqube"

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
    }
}

subprojects {
    def shortCommitId = 'git log -1 --pretty=%h'.execute([], project.rootDir).text.trim()
    def bootApps = ['browser-agent','browser-api','browser-common','browser-export','browser-press','browser-sync']
    if(project.name in bootApps){
        def testOrMain='main'
        if(project.name.contains('common')){
            testOrMain='test'
        }
        // 更新应用中的配置文件版本号
        def appConfTpl = file(projectDir.path+"/conftpl/application.yml")
        def appConfStr = appConfTpl.text
                .replace('_VERSION_',"$projectVersion")
                .replace('_DESCRIPTION_','通用配置: 请不要修改此文件，此文件由模板自动生成，若要修改，请移步至conftpl目录')
        file(projectDir.path+"/src/${testOrMain}/resources/application.yml").write(appConfStr)
    }


    // 设置编译器使用的编码
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    apply plugin: 'java'
    apply plugin: 'jacoco'

    group 'com.platon.browser'
    version "${projectVersion}"
    version "$projectVersion-$shortCommitId"
    sourceCompatibility = '1.8'

    repositories {
        maven {url "http://maven.aliyun.com/nexus/content/groups/public/"}
        maven {url "http://192.168.9.39:8081/repository/maven-public/"}
        mavenCentral()
    }

    dependencies {
        testCompile "junit:junit:$junitVersion"
        testCompile "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        compile "com.alibaba:fastjson:$fastJsonVersion"
        compile "org.apache.commons:commons-lang3:$commonLang3Version"
        compile "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        compile "commons-io:commons-io:$commonIoVersion"
        compile "redis.clients:jedis:$jedisVersion"
        compile "org.yaml:snakeyaml:1.23"
        testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.2'
        testCompile group: 'org.powermock', name: 'powermock-api-easymock', version: '2.0.2'
        testCompile group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.2'
        testCompile group: 'org.powermock', name: 'powermock-core', version: '2.0.2'

        compile ("org.elasticsearch.client:elasticsearch-rest-high-level-client:$elasticSearchVersion"){
            exclude module: 'elasticsearch'
            exclude module: 'elasticsearch-rest-client'
        }
        compile "org.elasticsearch:elasticsearch:$elasticSearchVersion"
        compile ("org.elasticsearch.client:elasticsearch-rest-client:$elasticSearchVersion"){
            exclude module: 'httpclient'
            exclude module: 'httpcore'
            exclude module: 'httpasyncclient'
            exclude module: 'httcore-nio'
        }
        compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.10'
        compile group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.12'
        compile group: 'org.apache.httpcomponents', name: 'httpasyncclient', version: '4.1.4'
        compile group: 'org.apache.httpcomponents', name: 'httpcore-nio', version: '4.4.12'

        compile group: 'org.springframework.retry', name: 'spring-retry', version: '1.2.4.RELEASE'
        testCompile group: 'org.hsqldb', name: 'hsqldb', version: '2.5.0'

    }

	//sonar扫描的路径
    sonarqube {
        properties {
            property "sonar.sources", "src/main/java"
        }
    }

    //jacoco测试报表的功能
    jacocoTestReport {
	    reports {
	        xml.enabled true
	        html.enabled true
	    }
	}

	jacocoTestCoverageVerification {
		violationRules {
			rule {
				limit {
					minimum = 0.7
				}
			}
		}
	 }

	check.dependsOn jacocoTestReport

	test {
	 //   include '**/Test*.class'
	// 忽略指定的测试用例
	    exclude '**/ProposalContractTest.class'
	    exclude '**/RestrictingPlanContractTest.class'
	    exclude '**/SlashContractTest.class'
	    exclude '**/TransactionSender.class'
	    exclude '**/CustomNodeMapperTest.class'
	    exclude '**/StakingContractTest.class'
	    exclude '**/WASMUploadTest.class'
	    exclude '**/WASMDestructTest.class'
	    exclude '**/SuicideAndSelfdestructTest.class'
	    exclude '**/HumanStandardTokenTest.class'
	    exclude '**/proxyppos/*Test.class'
	    exclude '**/proxyppos/**/*Test.class'
	}
}


