import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory
buildscript {
    dependencies {
        classpath 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.11.1'
    }
}
plugins {
	id 'org.springframework.boot' version "$springbootVersion"
}
apply plugin: 'io.spring.dependency-management'
apply plugin: 'distribution' //打包tar包用到的插件
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

dependencies {
	compile project(":browser-service")
	runtimeOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	compile 'io.projectreactor.netty:reactor-netty:0.8.10.RELEASE'
}


/*=====================API生成配置 START=======================*/
def rootDir = projectDir.parent;
def apiDefDir = file(projectDir.path+"/apidef")
files(apiDefDir.listFiles(new FilenameFilter() {
    boolean accept(File dir, String name) {
        return name.endsWith(".yml")
    }
})).each{yml ->
    println yml.name
    def json = yamlToJson(yml.text)
    // sync to root dir[docs]
    def rootJsonFile = file(rootDir+"/docs/apidef/"+yml.name+".json")
    rootJsonFile.write(json,"utf-8")
}

static yamlToJson(String yaml) {
    ObjectMapper yamlReader = new ObjectMapper(new YAMLFactory());
    Object obj = yamlReader.readValue(yaml, Object.class);
    ObjectMapper jsonWriter = new ObjectMapper();
    return jsonWriter.writerWithDefaultPrettyPrinter().writeValueAsString(obj);
}
/*=====================API生成配置 END=======================*/


//判断 build命令是否指定属性 profile。
//例如 gradle buildTar -xtest -Pprofile=online

ext {
    if (project.hasProperty('profile')) {
        profile = project['profile']
    } else {
        profile = "all"
    }
    println "profile:" + profile
}

// task 用来新建一些目录，目录位于build/package下
task createDirs() {
	file('build/lib').mkdirs()
    file('build/package/browser-api').mkdirs()
    file('build/package/lib').mkdirs()
}
//task 用来复制build出来的主jar包
task copyLibs(type: Copy) {
    from('build/libs')
    into('build/package/browser-api')
}
//task 用来复制配置文件
task copyConf(type: Copy) {
	if(profile != 'all') {
	    println 'copy conf from src/main/resources/application-'+profile+'.yml'
	    from('src/main/resources/application-'+profile+'.yml')
	    into('build/package/browser-api')
    } else {
    	println 'copy conf from src/main/resources all'
	    from('src/main/resources/application-test.yml')
	    into('build/package/browser-api')
	    from('src/main/resources/application-testNet.yml')
	    into('build/package/browser-api')
	    from('src/main/resources/application-prod.yml')
	    into('build/package/browser-api')
	    from('jasypt.properties')
	    into('build/package/browser-api')
    }
}
//task 用来复制bin下的脚本。这里的fileMode并没有生效，原因不详
task copyBin(type: Copy) {
    from('src/main/resources/bin')
    into('build/package/browser-api')
    fileMode 0744
}
// task 用来复制启动所依赖的jar包
task copyDep(type: Copy) {
    from configurations.runtime
    into 'build/lib'
}
// task 用来复制指定加密包
task copyJasypt(type: Copy) {
    from 'build/lib/jasypt-1.9.2.jar'
    into 'build/package/lib'
}
// task 用来删除lib
task deleteLib(type: Delete) {
    delete 'build/lib'
}
//把上述的task串联起来
task prepareFile(dependsOn: [
        'createDirs',
        'copyLibs',
        'copyConf',
        'copyBin',
        'copyDep',
        'copyJasypt',
        'deleteLib'
]){}
//指定打包的tar包的名字，以及文件来源目录
distributions {
    monitor {
        baseName = 'browser-api'
        contents {
            from { 'build/package' }
        }
    }

}

//distribution 插件的特性，以DistTar结尾
monitorDistTar.dependsOn  'prepareFile'
monitorDistTar.compression = Compression.GZIP
monitorDistTar.extension = 'tar.gz'

//定义一个task，先build 然后再打包tar包
task buildTar(dependsOn: [
        'build',
        monitorDistTar
]){}

//sonar扫描的路径
sonarqube {
    properties {
        property "sonar.sources", "src/main/java"
        property "sonar.exclusions", "**/*Application.java," +
                "**/WebSocketController.java,**/BrowserCache.java," +
                "**/JedisNoResultCall.java,**/CommonMethod.java," +
                "**/NullStringJsonSerializer.java,**/NullArrayJsonSerializer.java," +
                "**/RecaptchaDto.java,**/RewardJob.java"
    }
}

