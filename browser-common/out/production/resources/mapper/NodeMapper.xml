<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.platon.browser.dao.mapper.NodeMapper">
  <resultMap id="BaseResultMap" type="com.platon.browser.dao.entity.Node">
    <id column="node_id" jdbcType="VARCHAR" property="nodeId" />
    <result column="stat_slash_multi_qty" jdbcType="INTEGER" property="statSlashMultiQty" />
    <result column="stat_slash_low_qty" jdbcType="INTEGER" property="statSlashLowQty" />
    <result column="stat_block_qty" jdbcType="BIGINT" property="statBlockQty" />
    <result column="stat_expect_block_qty" jdbcType="BIGINT" property="statExpectBlockQty" />
    <result column="stat_reward_value" jdbcType="VARCHAR" property="statRewardValue" />
    <result column="stat_verifier_time" jdbcType="INTEGER" property="statVerifierTime" />
    <result column="is_recommend" jdbcType="INTEGER" property="isRecommend" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    node_id, stat_slash_multi_qty, stat_slash_low_qty, stat_block_qty, stat_expect_block_qty, 
    stat_reward_value, stat_verifier_time, is_recommend, create_time, update_time
  </sql>
  <select id="selectByExample" parameterType="com.platon.browser.dao.entity.NodeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from node
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from node
    where node_id = #{nodeId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from node
    where node_id = #{nodeId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.platon.browser.dao.entity.NodeExample">
    delete from node
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.platon.browser.dao.entity.Node">
    insert into node (node_id, stat_slash_multi_qty, stat_slash_low_qty, 
      stat_block_qty, stat_expect_block_qty, stat_reward_value, 
      stat_verifier_time, is_recommend, create_time, 
      update_time)
    values (#{nodeId,jdbcType=VARCHAR}, #{statSlashMultiQty,jdbcType=INTEGER}, #{statSlashLowQty,jdbcType=INTEGER}, 
      #{statBlockQty,jdbcType=BIGINT}, #{statExpectBlockQty,jdbcType=BIGINT}, #{statRewardValue,jdbcType=VARCHAR}, 
      #{statVerifierTime,jdbcType=INTEGER}, #{isRecommend,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.platon.browser.dao.entity.Node">
    insert into node
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="nodeId != null">
        node_id,
      </if>
      <if test="statSlashMultiQty != null">
        stat_slash_multi_qty,
      </if>
      <if test="statSlashLowQty != null">
        stat_slash_low_qty,
      </if>
      <if test="statBlockQty != null">
        stat_block_qty,
      </if>
      <if test="statExpectBlockQty != null">
        stat_expect_block_qty,
      </if>
      <if test="statRewardValue != null">
        stat_reward_value,
      </if>
      <if test="statVerifierTime != null">
        stat_verifier_time,
      </if>
      <if test="isRecommend != null">
        is_recommend,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="nodeId != null">
        #{nodeId,jdbcType=VARCHAR},
      </if>
      <if test="statSlashMultiQty != null">
        #{statSlashMultiQty,jdbcType=INTEGER},
      </if>
      <if test="statSlashLowQty != null">
        #{statSlashLowQty,jdbcType=INTEGER},
      </if>
      <if test="statBlockQty != null">
        #{statBlockQty,jdbcType=BIGINT},
      </if>
      <if test="statExpectBlockQty != null">
        #{statExpectBlockQty,jdbcType=BIGINT},
      </if>
      <if test="statRewardValue != null">
        #{statRewardValue,jdbcType=VARCHAR},
      </if>
      <if test="statVerifierTime != null">
        #{statVerifierTime,jdbcType=INTEGER},
      </if>
      <if test="isRecommend != null">
        #{isRecommend,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.platon.browser.dao.entity.NodeExample" resultType="java.lang.Long">
    select count(*) from node
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update node
    <set>
      <if test="record.nodeId != null">
        node_id = #{record.nodeId,jdbcType=VARCHAR},
      </if>
      <if test="record.statSlashMultiQty != null">
        stat_slash_multi_qty = #{record.statSlashMultiQty,jdbcType=INTEGER},
      </if>
      <if test="record.statSlashLowQty != null">
        stat_slash_low_qty = #{record.statSlashLowQty,jdbcType=INTEGER},
      </if>
      <if test="record.statBlockQty != null">
        stat_block_qty = #{record.statBlockQty,jdbcType=BIGINT},
      </if>
      <if test="record.statExpectBlockQty != null">
        stat_expect_block_qty = #{record.statExpectBlockQty,jdbcType=BIGINT},
      </if>
      <if test="record.statRewardValue != null">
        stat_reward_value = #{record.statRewardValue,jdbcType=VARCHAR},
      </if>
      <if test="record.statVerifierTime != null">
        stat_verifier_time = #{record.statVerifierTime,jdbcType=INTEGER},
      </if>
      <if test="record.isRecommend != null">
        is_recommend = #{record.isRecommend,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update node
    set node_id = #{record.nodeId,jdbcType=VARCHAR},
      stat_slash_multi_qty = #{record.statSlashMultiQty,jdbcType=INTEGER},
      stat_slash_low_qty = #{record.statSlashLowQty,jdbcType=INTEGER},
      stat_block_qty = #{record.statBlockQty,jdbcType=BIGINT},
      stat_expect_block_qty = #{record.statExpectBlockQty,jdbcType=BIGINT},
      stat_reward_value = #{record.statRewardValue,jdbcType=VARCHAR},
      stat_verifier_time = #{record.statVerifierTime,jdbcType=INTEGER},
      is_recommend = #{record.isRecommend,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.platon.browser.dao.entity.Node">
    update node
    <set>
      <if test="statSlashMultiQty != null">
        stat_slash_multi_qty = #{statSlashMultiQty,jdbcType=INTEGER},
      </if>
      <if test="statSlashLowQty != null">
        stat_slash_low_qty = #{statSlashLowQty,jdbcType=INTEGER},
      </if>
      <if test="statBlockQty != null">
        stat_block_qty = #{statBlockQty,jdbcType=BIGINT},
      </if>
      <if test="statExpectBlockQty != null">
        stat_expect_block_qty = #{statExpectBlockQty,jdbcType=BIGINT},
      </if>
      <if test="statRewardValue != null">
        stat_reward_value = #{statRewardValue,jdbcType=VARCHAR},
      </if>
      <if test="statVerifierTime != null">
        stat_verifier_time = #{statVerifierTime,jdbcType=INTEGER},
      </if>
      <if test="isRecommend != null">
        is_recommend = #{isRecommend,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where node_id = #{nodeId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.platon.browser.dao.entity.Node">
    update node
    set stat_slash_multi_qty = #{statSlashMultiQty,jdbcType=INTEGER},
      stat_slash_low_qty = #{statSlashLowQty,jdbcType=INTEGER},
      stat_block_qty = #{statBlockQty,jdbcType=BIGINT},
      stat_expect_block_qty = #{statExpectBlockQty,jdbcType=BIGINT},
      stat_reward_value = #{statRewardValue,jdbcType=VARCHAR},
      stat_verifier_time = #{statVerifierTime,jdbcType=INTEGER},
      is_recommend = #{isRecommend,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where node_id = #{nodeId,jdbcType=VARCHAR}
  </update>
  <insert id="batchInsert" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    insert into node
    (node_id, stat_slash_multi_qty, stat_slash_low_qty, stat_block_qty, stat_expect_block_qty, 
      stat_reward_value, stat_verifier_time, is_recommend, create_time, update_time)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.nodeId,jdbcType=VARCHAR}, #{item.statSlashMultiQty,jdbcType=INTEGER}, #{item.statSlashLowQty,jdbcType=INTEGER}, 
        #{item.statBlockQty,jdbcType=BIGINT}, #{item.statExpectBlockQty,jdbcType=BIGINT}, 
        #{item.statRewardValue,jdbcType=VARCHAR}, #{item.statVerifierTime,jdbcType=INTEGER}, 
        #{item.isRecommend,jdbcType=INTEGER}, #{item.createTime,jdbcType=TIMESTAMP}, #{item.updateTime,jdbcType=TIMESTAMP}
        )
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    insert into node (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'node_id'.toString() == column.value">
          #{item.nodeId,jdbcType=VARCHAR}
        </if>
        <if test="'stat_slash_multi_qty'.toString() == column.value">
          #{item.statSlashMultiQty,jdbcType=INTEGER}
        </if>
        <if test="'stat_slash_low_qty'.toString() == column.value">
          #{item.statSlashLowQty,jdbcType=INTEGER}
        </if>
        <if test="'stat_block_qty'.toString() == column.value">
          #{item.statBlockQty,jdbcType=BIGINT}
        </if>
        <if test="'stat_expect_block_qty'.toString() == column.value">
          #{item.statExpectBlockQty,jdbcType=BIGINT}
        </if>
        <if test="'stat_reward_value'.toString() == column.value">
          #{item.statRewardValue,jdbcType=VARCHAR}
        </if>
        <if test="'stat_verifier_time'.toString() == column.value">
          #{item.statVerifierTime,jdbcType=INTEGER}
        </if>
        <if test="'is_recommend'.toString() == column.value">
          #{item.isRecommend,jdbcType=INTEGER}
        </if>
        <if test="'create_time'.toString() == column.value">
          #{item.createTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'update_time'.toString() == column.value">
          #{item.updateTime,jdbcType=TIMESTAMP}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
</mapper>