<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.platon.browser.dao.mapper.TransactionMapper">
  <resultMap id="BaseResultMap" type="com.platon.browser.dao.entity.Transaction">
    <id column="hash" jdbcType="VARCHAR" property="hash" />
    <result column="block_number" jdbcType="BIGINT" property="blockNumber" />
    <result column="block_hash" jdbcType="VARCHAR" property="blockHash" />
    <result column="transaction_index" jdbcType="INTEGER" property="transactionIndex" />
    <result column="timestamp" jdbcType="TIMESTAMP" property="timestamp" />
    <result column="nonce" jdbcType="VARCHAR" property="nonce" />
    <result column="tx_receipt_status" jdbcType="INTEGER" property="txReceiptStatus" />
    <result column="gas_price" jdbcType="VARCHAR" property="gasPrice" />
    <result column="gas_used" jdbcType="VARCHAR" property="gasUsed" />
    <result column="gas_limit" jdbcType="VARCHAR" property="gasLimit" />
    <result column="from" jdbcType="VARCHAR" property="from" />
    <result column="to" jdbcType="VARCHAR" property="to" />
    <result column="value" jdbcType="VARCHAR" property="value" />
    <result column="tx_type" jdbcType="VARCHAR" property="txType" />
    <result column="actual_tx_cost" jdbcType="VARCHAR" property="actualTxCost" />
    <result column="receive_type" jdbcType="VARCHAR" property="receiveType" />
    <result column="sequence" jdbcType="BIGINT" property="sequence" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.platon.browser.dao.entity.TransactionWithBLOBs">
    <result column="input" jdbcType="LONGVARCHAR" property="input" />
    <result column="tx_info" jdbcType="LONGVARCHAR" property="txInfo" />
    <result column="fail_reason" jdbcType="LONGVARCHAR" property="failReason" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    hash, block_number, block_hash, transaction_index, `timestamp`, nonce, tx_receipt_status, 
    gas_price, gas_used, gas_limit, `from`, `to`, `value`, tx_type, actual_tx_cost, receive_type, 
    `sequence`, create_time, update_time
  </sql>
  <sql id="Blob_Column_List">
    `input`, tx_info, fail_reason
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.platon.browser.dao.entity.TransactionExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from transaction
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.platon.browser.dao.entity.TransactionExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from transaction
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from transaction
    where hash = #{hash,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from transaction
    where hash = #{hash,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.platon.browser.dao.entity.TransactionExample">
    delete from transaction
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.platon.browser.dao.entity.TransactionWithBLOBs">
    insert into transaction (hash, block_number, block_hash, 
      transaction_index, `timestamp`, nonce, 
      tx_receipt_status, gas_price, gas_used, 
      gas_limit, `from`, `to`, 
      `value`, tx_type, actual_tx_cost, 
      receive_type, `sequence`, create_time, 
      update_time, `input`, tx_info, 
      fail_reason)
    values (#{hash,jdbcType=VARCHAR}, #{blockNumber,jdbcType=BIGINT}, #{blockHash,jdbcType=VARCHAR}, 
      #{transactionIndex,jdbcType=INTEGER}, #{timestamp,jdbcType=TIMESTAMP}, #{nonce,jdbcType=VARCHAR}, 
      #{txReceiptStatus,jdbcType=INTEGER}, #{gasPrice,jdbcType=VARCHAR}, #{gasUsed,jdbcType=VARCHAR}, 
      #{gasLimit,jdbcType=VARCHAR}, #{from,jdbcType=VARCHAR}, #{to,jdbcType=VARCHAR}, 
      #{value,jdbcType=VARCHAR}, #{txType,jdbcType=VARCHAR}, #{actualTxCost,jdbcType=VARCHAR}, 
      #{receiveType,jdbcType=VARCHAR}, #{sequence,jdbcType=BIGINT}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{input,jdbcType=LONGVARCHAR}, #{txInfo,jdbcType=LONGVARCHAR}, 
      #{failReason,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.platon.browser.dao.entity.TransactionWithBLOBs">
    insert into transaction
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="hash != null">
        hash,
      </if>
      <if test="blockNumber != null">
        block_number,
      </if>
      <if test="blockHash != null">
        block_hash,
      </if>
      <if test="transactionIndex != null">
        transaction_index,
      </if>
      <if test="timestamp != null">
        `timestamp`,
      </if>
      <if test="nonce != null">
        nonce,
      </if>
      <if test="txReceiptStatus != null">
        tx_receipt_status,
      </if>
      <if test="gasPrice != null">
        gas_price,
      </if>
      <if test="gasUsed != null">
        gas_used,
      </if>
      <if test="gasLimit != null">
        gas_limit,
      </if>
      <if test="from != null">
        `from`,
      </if>
      <if test="to != null">
        `to`,
      </if>
      <if test="value != null">
        `value`,
      </if>
      <if test="txType != null">
        tx_type,
      </if>
      <if test="actualTxCost != null">
        actual_tx_cost,
      </if>
      <if test="receiveType != null">
        receive_type,
      </if>
      <if test="sequence != null">
        `sequence`,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="input != null">
        `input`,
      </if>
      <if test="txInfo != null">
        tx_info,
      </if>
      <if test="failReason != null">
        fail_reason,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="hash != null">
        #{hash,jdbcType=VARCHAR},
      </if>
      <if test="blockNumber != null">
        #{blockNumber,jdbcType=BIGINT},
      </if>
      <if test="blockHash != null">
        #{blockHash,jdbcType=VARCHAR},
      </if>
      <if test="transactionIndex != null">
        #{transactionIndex,jdbcType=INTEGER},
      </if>
      <if test="timestamp != null">
        #{timestamp,jdbcType=TIMESTAMP},
      </if>
      <if test="nonce != null">
        #{nonce,jdbcType=VARCHAR},
      </if>
      <if test="txReceiptStatus != null">
        #{txReceiptStatus,jdbcType=INTEGER},
      </if>
      <if test="gasPrice != null">
        #{gasPrice,jdbcType=VARCHAR},
      </if>
      <if test="gasUsed != null">
        #{gasUsed,jdbcType=VARCHAR},
      </if>
      <if test="gasLimit != null">
        #{gasLimit,jdbcType=VARCHAR},
      </if>
      <if test="from != null">
        #{from,jdbcType=VARCHAR},
      </if>
      <if test="to != null">
        #{to,jdbcType=VARCHAR},
      </if>
      <if test="value != null">
        #{value,jdbcType=VARCHAR},
      </if>
      <if test="txType != null">
        #{txType,jdbcType=VARCHAR},
      </if>
      <if test="actualTxCost != null">
        #{actualTxCost,jdbcType=VARCHAR},
      </if>
      <if test="receiveType != null">
        #{receiveType,jdbcType=VARCHAR},
      </if>
      <if test="sequence != null">
        #{sequence,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="input != null">
        #{input,jdbcType=LONGVARCHAR},
      </if>
      <if test="txInfo != null">
        #{txInfo,jdbcType=LONGVARCHAR},
      </if>
      <if test="failReason != null">
        #{failReason,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.platon.browser.dao.entity.TransactionExample" resultType="java.lang.Long">
    select count(*) from transaction
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update transaction
    <set>
      <if test="record.hash != null">
        hash = #{record.hash,jdbcType=VARCHAR},
      </if>
      <if test="record.blockNumber != null">
        block_number = #{record.blockNumber,jdbcType=BIGINT},
      </if>
      <if test="record.blockHash != null">
        block_hash = #{record.blockHash,jdbcType=VARCHAR},
      </if>
      <if test="record.transactionIndex != null">
        transaction_index = #{record.transactionIndex,jdbcType=INTEGER},
      </if>
      <if test="record.timestamp != null">
        `timestamp` = #{record.timestamp,jdbcType=TIMESTAMP},
      </if>
      <if test="record.nonce != null">
        nonce = #{record.nonce,jdbcType=VARCHAR},
      </if>
      <if test="record.txReceiptStatus != null">
        tx_receipt_status = #{record.txReceiptStatus,jdbcType=INTEGER},
      </if>
      <if test="record.gasPrice != null">
        gas_price = #{record.gasPrice,jdbcType=VARCHAR},
      </if>
      <if test="record.gasUsed != null">
        gas_used = #{record.gasUsed,jdbcType=VARCHAR},
      </if>
      <if test="record.gasLimit != null">
        gas_limit = #{record.gasLimit,jdbcType=VARCHAR},
      </if>
      <if test="record.from != null">
        `from` = #{record.from,jdbcType=VARCHAR},
      </if>
      <if test="record.to != null">
        `to` = #{record.to,jdbcType=VARCHAR},
      </if>
      <if test="record.value != null">
        `value` = #{record.value,jdbcType=VARCHAR},
      </if>
      <if test="record.txType != null">
        tx_type = #{record.txType,jdbcType=VARCHAR},
      </if>
      <if test="record.actualTxCost != null">
        actual_tx_cost = #{record.actualTxCost,jdbcType=VARCHAR},
      </if>
      <if test="record.receiveType != null">
        receive_type = #{record.receiveType,jdbcType=VARCHAR},
      </if>
      <if test="record.sequence != null">
        `sequence` = #{record.sequence,jdbcType=BIGINT},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.input != null">
        `input` = #{record.input,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.txInfo != null">
        tx_info = #{record.txInfo,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.failReason != null">
        fail_reason = #{record.failReason,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update transaction
    set hash = #{record.hash,jdbcType=VARCHAR},
      block_number = #{record.blockNumber,jdbcType=BIGINT},
      block_hash = #{record.blockHash,jdbcType=VARCHAR},
      transaction_index = #{record.transactionIndex,jdbcType=INTEGER},
      `timestamp` = #{record.timestamp,jdbcType=TIMESTAMP},
      nonce = #{record.nonce,jdbcType=VARCHAR},
      tx_receipt_status = #{record.txReceiptStatus,jdbcType=INTEGER},
      gas_price = #{record.gasPrice,jdbcType=VARCHAR},
      gas_used = #{record.gasUsed,jdbcType=VARCHAR},
      gas_limit = #{record.gasLimit,jdbcType=VARCHAR},
      `from` = #{record.from,jdbcType=VARCHAR},
      `to` = #{record.to,jdbcType=VARCHAR},
      `value` = #{record.value,jdbcType=VARCHAR},
      tx_type = #{record.txType,jdbcType=VARCHAR},
      actual_tx_cost = #{record.actualTxCost,jdbcType=VARCHAR},
      receive_type = #{record.receiveType,jdbcType=VARCHAR},
      `sequence` = #{record.sequence,jdbcType=BIGINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      `input` = #{record.input,jdbcType=LONGVARCHAR},
      tx_info = #{record.txInfo,jdbcType=LONGVARCHAR},
      fail_reason = #{record.failReason,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update transaction
    set hash = #{record.hash,jdbcType=VARCHAR},
      block_number = #{record.blockNumber,jdbcType=BIGINT},
      block_hash = #{record.blockHash,jdbcType=VARCHAR},
      transaction_index = #{record.transactionIndex,jdbcType=INTEGER},
      `timestamp` = #{record.timestamp,jdbcType=TIMESTAMP},
      nonce = #{record.nonce,jdbcType=VARCHAR},
      tx_receipt_status = #{record.txReceiptStatus,jdbcType=INTEGER},
      gas_price = #{record.gasPrice,jdbcType=VARCHAR},
      gas_used = #{record.gasUsed,jdbcType=VARCHAR},
      gas_limit = #{record.gasLimit,jdbcType=VARCHAR},
      `from` = #{record.from,jdbcType=VARCHAR},
      `to` = #{record.to,jdbcType=VARCHAR},
      `value` = #{record.value,jdbcType=VARCHAR},
      tx_type = #{record.txType,jdbcType=VARCHAR},
      actual_tx_cost = #{record.actualTxCost,jdbcType=VARCHAR},
      receive_type = #{record.receiveType,jdbcType=VARCHAR},
      `sequence` = #{record.sequence,jdbcType=BIGINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.platon.browser.dao.entity.TransactionWithBLOBs">
    update transaction
    <set>
      <if test="blockNumber != null">
        block_number = #{blockNumber,jdbcType=BIGINT},
      </if>
      <if test="blockHash != null">
        block_hash = #{blockHash,jdbcType=VARCHAR},
      </if>
      <if test="transactionIndex != null">
        transaction_index = #{transactionIndex,jdbcType=INTEGER},
      </if>
      <if test="timestamp != null">
        `timestamp` = #{timestamp,jdbcType=TIMESTAMP},
      </if>
      <if test="nonce != null">
        nonce = #{nonce,jdbcType=VARCHAR},
      </if>
      <if test="txReceiptStatus != null">
        tx_receipt_status = #{txReceiptStatus,jdbcType=INTEGER},
      </if>
      <if test="gasPrice != null">
        gas_price = #{gasPrice,jdbcType=VARCHAR},
      </if>
      <if test="gasUsed != null">
        gas_used = #{gasUsed,jdbcType=VARCHAR},
      </if>
      <if test="gasLimit != null">
        gas_limit = #{gasLimit,jdbcType=VARCHAR},
      </if>
      <if test="from != null">
        `from` = #{from,jdbcType=VARCHAR},
      </if>
      <if test="to != null">
        `to` = #{to,jdbcType=VARCHAR},
      </if>
      <if test="value != null">
        `value` = #{value,jdbcType=VARCHAR},
      </if>
      <if test="txType != null">
        tx_type = #{txType,jdbcType=VARCHAR},
      </if>
      <if test="actualTxCost != null">
        actual_tx_cost = #{actualTxCost,jdbcType=VARCHAR},
      </if>
      <if test="receiveType != null">
        receive_type = #{receiveType,jdbcType=VARCHAR},
      </if>
      <if test="sequence != null">
        `sequence` = #{sequence,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="input != null">
        `input` = #{input,jdbcType=LONGVARCHAR},
      </if>
      <if test="txInfo != null">
        tx_info = #{txInfo,jdbcType=LONGVARCHAR},
      </if>
      <if test="failReason != null">
        fail_reason = #{failReason,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where hash = #{hash,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.platon.browser.dao.entity.TransactionWithBLOBs">
    update transaction
    set block_number = #{blockNumber,jdbcType=BIGINT},
      block_hash = #{blockHash,jdbcType=VARCHAR},
      transaction_index = #{transactionIndex,jdbcType=INTEGER},
      `timestamp` = #{timestamp,jdbcType=TIMESTAMP},
      nonce = #{nonce,jdbcType=VARCHAR},
      tx_receipt_status = #{txReceiptStatus,jdbcType=INTEGER},
      gas_price = #{gasPrice,jdbcType=VARCHAR},
      gas_used = #{gasUsed,jdbcType=VARCHAR},
      gas_limit = #{gasLimit,jdbcType=VARCHAR},
      `from` = #{from,jdbcType=VARCHAR},
      `to` = #{to,jdbcType=VARCHAR},
      `value` = #{value,jdbcType=VARCHAR},
      tx_type = #{txType,jdbcType=VARCHAR},
      actual_tx_cost = #{actualTxCost,jdbcType=VARCHAR},
      receive_type = #{receiveType,jdbcType=VARCHAR},
      `sequence` = #{sequence,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      `input` = #{input,jdbcType=LONGVARCHAR},
      tx_info = #{txInfo,jdbcType=LONGVARCHAR},
      fail_reason = #{failReason,jdbcType=LONGVARCHAR}
    where hash = #{hash,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.platon.browser.dao.entity.Transaction">
    update transaction
    set block_number = #{blockNumber,jdbcType=BIGINT},
      block_hash = #{blockHash,jdbcType=VARCHAR},
      transaction_index = #{transactionIndex,jdbcType=INTEGER},
      `timestamp` = #{timestamp,jdbcType=TIMESTAMP},
      nonce = #{nonce,jdbcType=VARCHAR},
      tx_receipt_status = #{txReceiptStatus,jdbcType=INTEGER},
      gas_price = #{gasPrice,jdbcType=VARCHAR},
      gas_used = #{gasUsed,jdbcType=VARCHAR},
      gas_limit = #{gasLimit,jdbcType=VARCHAR},
      `from` = #{from,jdbcType=VARCHAR},
      `to` = #{to,jdbcType=VARCHAR},
      `value` = #{value,jdbcType=VARCHAR},
      tx_type = #{txType,jdbcType=VARCHAR},
      actual_tx_cost = #{actualTxCost,jdbcType=VARCHAR},
      receive_type = #{receiveType,jdbcType=VARCHAR},
      `sequence` = #{sequence,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where hash = #{hash,jdbcType=VARCHAR}
  </update>
  <insert id="batchInsert" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    insert into transaction
    (hash, block_number, block_hash, transaction_index, `timestamp`, nonce, tx_receipt_status, 
      gas_price, gas_used, gas_limit, `from`, `to`, `value`, tx_type, actual_tx_cost, 
      receive_type, `sequence`, create_time, update_time, `input`, tx_info, fail_reason
      )
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.hash,jdbcType=VARCHAR}, #{item.blockNumber,jdbcType=BIGINT}, #{item.blockHash,jdbcType=VARCHAR}, 
        #{item.transactionIndex,jdbcType=INTEGER}, #{item.timestamp,jdbcType=TIMESTAMP}, 
        #{item.nonce,jdbcType=VARCHAR}, #{item.txReceiptStatus,jdbcType=INTEGER}, #{item.gasPrice,jdbcType=VARCHAR}, 
        #{item.gasUsed,jdbcType=VARCHAR}, #{item.gasLimit,jdbcType=VARCHAR}, #{item.from,jdbcType=VARCHAR}, 
        #{item.to,jdbcType=VARCHAR}, #{item.value,jdbcType=VARCHAR}, #{item.txType,jdbcType=VARCHAR}, 
        #{item.actualTxCost,jdbcType=VARCHAR}, #{item.receiveType,jdbcType=VARCHAR}, #{item.sequence,jdbcType=BIGINT}, 
        #{item.createTime,jdbcType=TIMESTAMP}, #{item.updateTime,jdbcType=TIMESTAMP}, #{item.input,jdbcType=LONGVARCHAR}, 
        #{item.txInfo,jdbcType=LONGVARCHAR}, #{item.failReason,jdbcType=LONGVARCHAR})
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    insert into transaction (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'hash'.toString() == column.value">
          #{item.hash,jdbcType=VARCHAR}
        </if>
        <if test="'block_number'.toString() == column.value">
          #{item.blockNumber,jdbcType=BIGINT}
        </if>
        <if test="'block_hash'.toString() == column.value">
          #{item.blockHash,jdbcType=VARCHAR}
        </if>
        <if test="'transaction_index'.toString() == column.value">
          #{item.transactionIndex,jdbcType=INTEGER}
        </if>
        <if test="'timestamp'.toString() == column.value">
          #{item.timestamp,jdbcType=TIMESTAMP}
        </if>
        <if test="'nonce'.toString() == column.value">
          #{item.nonce,jdbcType=VARCHAR}
        </if>
        <if test="'tx_receipt_status'.toString() == column.value">
          #{item.txReceiptStatus,jdbcType=INTEGER}
        </if>
        <if test="'gas_price'.toString() == column.value">
          #{item.gasPrice,jdbcType=VARCHAR}
        </if>
        <if test="'gas_used'.toString() == column.value">
          #{item.gasUsed,jdbcType=VARCHAR}
        </if>
        <if test="'gas_limit'.toString() == column.value">
          #{item.gasLimit,jdbcType=VARCHAR}
        </if>
        <if test="'from'.toString() == column.value">
          #{item.from,jdbcType=VARCHAR}
        </if>
        <if test="'to'.toString() == column.value">
          #{item.to,jdbcType=VARCHAR}
        </if>
        <if test="'value'.toString() == column.value">
          #{item.value,jdbcType=VARCHAR}
        </if>
        <if test="'tx_type'.toString() == column.value">
          #{item.txType,jdbcType=VARCHAR}
        </if>
        <if test="'actual_tx_cost'.toString() == column.value">
          #{item.actualTxCost,jdbcType=VARCHAR}
        </if>
        <if test="'receive_type'.toString() == column.value">
          #{item.receiveType,jdbcType=VARCHAR}
        </if>
        <if test="'sequence'.toString() == column.value">
          #{item.sequence,jdbcType=BIGINT}
        </if>
        <if test="'create_time'.toString() == column.value">
          #{item.createTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'update_time'.toString() == column.value">
          #{item.updateTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'input'.toString() == column.value">
          #{item.input,jdbcType=LONGVARCHAR}
        </if>
        <if test="'tx_info'.toString() == column.value">
          #{item.txInfo,jdbcType=LONGVARCHAR}
        </if>
        <if test="'fail_reason'.toString() == column.value">
          #{item.failReason,jdbcType=LONGVARCHAR}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
</mapper>