<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.platon.browser.dao.mapper.CustomDelegationMapper">

  <resultMap id="BaseResultMap" type="com.platon.browser.dto.CustomDelegation" extends="com.platon.browser.dao.mapper.DelegationMapper.BaseResultMap"/>
  <resultMap id="AndStakingResultMap" type="com.platon.browser.dto.DelegationStaking">
    <id column="delegate_addr" jdbcType="VARCHAR" property="delegateAddr" />
    <id column="staking_block_num" jdbcType="BIGINT" property="stakingBlockNum" />
    <id column="node_id" jdbcType="VARCHAR" property="nodeId" />
    <result column="delegate_hes" jdbcType="DECIMAL" property="delegateHes" />
    <result column="delegate_locked" jdbcType="DECIMAL" property="delegateLocked" />
    <result column="delegate_released" jdbcType="DECIMAL" property="delegateReleased" />
    <result column="is_history" jdbcType="INTEGER" property="isHistory" />
    
    <result column="stat_delegate_hes" jdbcType="DECIMAL" property="statDelegateHes" />
    <result column="stat_delegate_locked" jdbcType="DECIMAL" property="statDelegateLocked" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="node_name" jdbcType="VARCHAR" property="nodeName" />
    <result column="stat_delegate_released" jdbcType="DECIMAL" property="statDelegateReleased" />
    <result column="allDelegate" jdbcType="DECIMAL" property="allDelegate" />
    <result column="allLockDelegate" jdbcType="DECIMAL" property="allLockDelegate" />
  </resultMap>
  
  <select id="selectByNodeId" resultMap="BaseResultMap">
    select
    <include refid="com.platon.browser.dao.mapper.DelegationMapper.Base_Column_List" />
    from delegation where node_id = #{nodeId}
  </select>

  <select id="selectByNodeIdList" resultMap="BaseResultMap">
    select
    <include refid="com.platon.browser.dao.mapper.DelegationMapper.Base_Column_List" />
    from delegation where node_id IN (<foreach collection="nodeIds" item="item" separator=",">#{item,jdbcType=VARCHAR}</foreach>)
  </select>

  <!--批量选择性插入或更新-->
  <insert id="batchInsertOrUpdateSelective" parameterType="map">
    replace into delegation (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'delegate_addr'.toString() == column.value">
          #{item.delegateAddr,jdbcType=VARCHAR}
        </if>
        <if test="'staking_block_num'.toString() == column.value">
          #{item.stakingBlockNum,jdbcType=BIGINT}
        </if>
        <if test="'node_id'.toString() == column.value">
          #{item.nodeId,jdbcType=VARCHAR}
        </if>
        <if test="'delegate_has'.toString() == column.value">
          #{item.delegateHas,jdbcType=VARCHAR}
        </if>
        <if test="'delegate_locked'.toString() == column.value">
          #{item.delegateLocked,jdbcType=VARCHAR}
        </if>
        <if test="'delegate_reduction'.toString() == column.value">
          #{item.delegateReduction,jdbcType=VARCHAR}
        </if>
        <if test="'is_history'.toString() == column.value">
          #{item.isHistory,jdbcType=INTEGER}
        </if>
        <if test="'sequence'.toString() == column.value">
          #{item.sequence,jdbcType=BIGINT}
        </if>
        <if test="'create_time'.toString() == column.value">
          #{item.createTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'update_time'.toString() == column.value">
          #{item.updateTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'cur_delegation_block_num'.toString() == column.value">
          #{item.curDelegationBlockNum,jdbcType=BIGINT}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
  
  <select id="selectStakingByExample" resultMap="AndStakingResultMap">
  	SELECT 
		t1.delegate_addr,t1.staking_block_num,t1.node_id,t1.delegate_hes,t1.delegate_locked,t1.delegate_released,
		t2.stat_delegate_hes,t2.stat_delegate_locked,t2.status,t2.node_name
	FROM delegation t1
	LEFT JOIN staking t2 ON t1.node_id=t2.node_id AND t1.staking_block_num=t2.staking_block_num
	<where>
		<if test="nodeId != null">
			AND t1.node_id=#{nodeId,jdbcType=VARCHAR}
		</if>
		<if test="stakingBlockNum != null">
			AND t1.staking_block_num=#{stakingBlockNum,jdbcType=BIGINT}
		</if>
	</where>
	 order by t1.cur_delegation_block_num desc
  </select>
  
  <select id="selectDelegationByExample" resultMap="AndStakingResultMap">
  	SELECT 
		t1.delegate_addr,t1.staking_block_num,t1.node_id,sum(t1.delegate_hes) as delegate_hes,sum(t1.delegate_locked) as delegate_locked
		,t1.delegate_released,t2.stat_delegate_hes,t2.stat_delegate_locked,t2.status,t2.node_name
	FROM delegation t1
	LEFT JOIN staking t2 ON t1.node_id=t2.node_id AND t1.staking_block_num=t2.staking_block_num
	<where>
		<if test="delegateAddr != null">
			AND t1.delegate_addr=#{delegateAddr,jdbcType=VARCHAR}
		</if>
	</where>
	group by t1.node_id order by t1.cur_delegation_block_num desc
  </select>
  
  <select id="selectSumDelegateByExample" resultMap="AndStakingResultMap">
	select 
	  	sum(t1.delegate_hes+ t1.delegate_locked ) as 'allDelegate',
		sum(case when t2.status=1 then t1.delegate_locked  else 0 end) as 'allLockDelegate'
	FROM delegation t1
	LEFT JOIN staking t2 ON t1.node_id=t2.node_id AND t1.staking_block_num=t2.staking_block_num
	<where>
		<if test="nodeId != null">
			AND t1.node_id=#{nodeId,jdbcType=VARCHAR}
		</if>
		<if test="stakingBlockNum != null">
			AND t1.staking_block_num=#{stakingBlockNum,jdbcType=BIGINT}
		</if>
	</where>
  </select>
  
</mapper>
