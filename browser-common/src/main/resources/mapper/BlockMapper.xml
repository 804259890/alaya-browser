<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.platon.browser.dao.mapper.BlockMapper">
  <resultMap id="BaseResultMap" type="com.platon.browser.dao.entity.Block">
    <id column="number" jdbcType="BIGINT" property="number" />
    <result column="hash" jdbcType="VARCHAR" property="hash" />
    <result column="parent_hash" jdbcType="VARCHAR" property="parentHash" />
    <result column="timestamp" jdbcType="TIMESTAMP" property="timestamp" />
    <result column="size" jdbcType="INTEGER" property="size" />
    <result column="gas_limit" jdbcType="VARCHAR" property="gasLimit" />
    <result column="gas_used" jdbcType="VARCHAR" property="gasUsed" />
    <result column="block_reward" jdbcType="VARCHAR" property="blockReward" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="node_name" jdbcType="VARCHAR" property="nodeName" />
    <result column="node_id" jdbcType="VARCHAR" property="nodeId" />
    <result column="stat_tx_qty" jdbcType="INTEGER" property="statTxQty" />
    <result column="stat_transfer_qty" jdbcType="INTEGER" property="statTransferQty" />
    <result column="stat_staking_qty" jdbcType="INTEGER" property="statStakingQty" />
    <result column="stat_proposal_qty" jdbcType="INTEGER" property="statProposalQty" />
    <result column="stat_delegate_qty" jdbcType="INTEGER" property="statDelegateQty" />
    <result column="stat_tx_gas_limit" jdbcType="VARCHAR" property="statTxGasLimit" />
    <result column="stat_tx_fee" jdbcType="VARCHAR" property="statTxFee" />
    <result column="miner" jdbcType="VARCHAR" property="miner" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.platon.browser.dao.entity.Block">
    <result column="extra_data" jdbcType="LONGVARCHAR" property="extraData" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    `number`, hash, parent_hash, `timestamp`, `size`, gas_limit, gas_used, block_reward, 
    create_time, update_time, node_name, node_id, stat_tx_qty, stat_transfer_qty, stat_staking_qty, 
    stat_proposal_qty, stat_delegate_qty, stat_tx_gas_limit, stat_tx_fee, miner
  </sql>
  <sql id="Blob_Column_List">
    extra_data
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.platon.browser.dao.entity.BlockExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from block
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.platon.browser.dao.entity.BlockExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from block
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from block
    where `number` = #{number,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from block
    where `number` = #{number,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.platon.browser.dao.entity.BlockExample">
    delete from block
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.platon.browser.dao.entity.Block">
    insert into block (`number`, hash, parent_hash, 
      `timestamp`, `size`, gas_limit, 
      gas_used, block_reward, create_time, 
      update_time, node_name, node_id, 
      stat_tx_qty, stat_transfer_qty, stat_staking_qty, 
      stat_proposal_qty, stat_delegate_qty, stat_tx_gas_limit, 
      stat_tx_fee, miner, extra_data
      )
    values (#{number,jdbcType=BIGINT}, #{hash,jdbcType=VARCHAR}, #{parentHash,jdbcType=VARCHAR}, 
      #{timestamp,jdbcType=TIMESTAMP}, #{size,jdbcType=INTEGER}, #{gasLimit,jdbcType=VARCHAR}, 
      #{gasUsed,jdbcType=VARCHAR}, #{blockReward,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{nodeName,jdbcType=VARCHAR}, #{nodeId,jdbcType=VARCHAR}, 
      #{statTxQty,jdbcType=INTEGER}, #{statTransferQty,jdbcType=INTEGER}, #{statStakingQty,jdbcType=INTEGER}, 
      #{statProposalQty,jdbcType=INTEGER}, #{statDelegateQty,jdbcType=INTEGER}, #{statTxGasLimit,jdbcType=VARCHAR}, 
      #{statTxFee,jdbcType=VARCHAR}, #{miner,jdbcType=VARCHAR}, #{extraData,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.platon.browser.dao.entity.Block">
    insert into block
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="number != null">
        `number`,
      </if>
      <if test="hash != null">
        hash,
      </if>
      <if test="parentHash != null">
        parent_hash,
      </if>
      <if test="timestamp != null">
        `timestamp`,
      </if>
      <if test="size != null">
        `size`,
      </if>
      <if test="gasLimit != null">
        gas_limit,
      </if>
      <if test="gasUsed != null">
        gas_used,
      </if>
      <if test="blockReward != null">
        block_reward,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="nodeName != null">
        node_name,
      </if>
      <if test="nodeId != null">
        node_id,
      </if>
      <if test="statTxQty != null">
        stat_tx_qty,
      </if>
      <if test="statTransferQty != null">
        stat_transfer_qty,
      </if>
      <if test="statStakingQty != null">
        stat_staking_qty,
      </if>
      <if test="statProposalQty != null">
        stat_proposal_qty,
      </if>
      <if test="statDelegateQty != null">
        stat_delegate_qty,
      </if>
      <if test="statTxGasLimit != null">
        stat_tx_gas_limit,
      </if>
      <if test="statTxFee != null">
        stat_tx_fee,
      </if>
      <if test="miner != null">
        miner,
      </if>
      <if test="extraData != null">
        extra_data,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="number != null">
        #{number,jdbcType=BIGINT},
      </if>
      <if test="hash != null">
        #{hash,jdbcType=VARCHAR},
      </if>
      <if test="parentHash != null">
        #{parentHash,jdbcType=VARCHAR},
      </if>
      <if test="timestamp != null">
        #{timestamp,jdbcType=TIMESTAMP},
      </if>
      <if test="size != null">
        #{size,jdbcType=INTEGER},
      </if>
      <if test="gasLimit != null">
        #{gasLimit,jdbcType=VARCHAR},
      </if>
      <if test="gasUsed != null">
        #{gasUsed,jdbcType=VARCHAR},
      </if>
      <if test="blockReward != null">
        #{blockReward,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="nodeName != null">
        #{nodeName,jdbcType=VARCHAR},
      </if>
      <if test="nodeId != null">
        #{nodeId,jdbcType=VARCHAR},
      </if>
      <if test="statTxQty != null">
        #{statTxQty,jdbcType=INTEGER},
      </if>
      <if test="statTransferQty != null">
        #{statTransferQty,jdbcType=INTEGER},
      </if>
      <if test="statStakingQty != null">
        #{statStakingQty,jdbcType=INTEGER},
      </if>
      <if test="statProposalQty != null">
        #{statProposalQty,jdbcType=INTEGER},
      </if>
      <if test="statDelegateQty != null">
        #{statDelegateQty,jdbcType=INTEGER},
      </if>
      <if test="statTxGasLimit != null">
        #{statTxGasLimit,jdbcType=VARCHAR},
      </if>
      <if test="statTxFee != null">
        #{statTxFee,jdbcType=VARCHAR},
      </if>
      <if test="miner != null">
        #{miner,jdbcType=VARCHAR},
      </if>
      <if test="extraData != null">
        #{extraData,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.platon.browser.dao.entity.BlockExample" resultType="java.lang.Long">
    select count(*) from block
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update block
    <set>
      <if test="record.number != null">
        `number` = #{record.number,jdbcType=BIGINT},
      </if>
      <if test="record.hash != null">
        hash = #{record.hash,jdbcType=VARCHAR},
      </if>
      <if test="record.parentHash != null">
        parent_hash = #{record.parentHash,jdbcType=VARCHAR},
      </if>
      <if test="record.timestamp != null">
        `timestamp` = #{record.timestamp,jdbcType=TIMESTAMP},
      </if>
      <if test="record.size != null">
        `size` = #{record.size,jdbcType=INTEGER},
      </if>
      <if test="record.gasLimit != null">
        gas_limit = #{record.gasLimit,jdbcType=VARCHAR},
      </if>
      <if test="record.gasUsed != null">
        gas_used = #{record.gasUsed,jdbcType=VARCHAR},
      </if>
      <if test="record.blockReward != null">
        block_reward = #{record.blockReward,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.nodeName != null">
        node_name = #{record.nodeName,jdbcType=VARCHAR},
      </if>
      <if test="record.nodeId != null">
        node_id = #{record.nodeId,jdbcType=VARCHAR},
      </if>
      <if test="record.statTxQty != null">
        stat_tx_qty = #{record.statTxQty,jdbcType=INTEGER},
      </if>
      <if test="record.statTransferQty != null">
        stat_transfer_qty = #{record.statTransferQty,jdbcType=INTEGER},
      </if>
      <if test="record.statStakingQty != null">
        stat_staking_qty = #{record.statStakingQty,jdbcType=INTEGER},
      </if>
      <if test="record.statProposalQty != null">
        stat_proposal_qty = #{record.statProposalQty,jdbcType=INTEGER},
      </if>
      <if test="record.statDelegateQty != null">
        stat_delegate_qty = #{record.statDelegateQty,jdbcType=INTEGER},
      </if>
      <if test="record.statTxGasLimit != null">
        stat_tx_gas_limit = #{record.statTxGasLimit,jdbcType=VARCHAR},
      </if>
      <if test="record.statTxFee != null">
        stat_tx_fee = #{record.statTxFee,jdbcType=VARCHAR},
      </if>
      <if test="record.miner != null">
        miner = #{record.miner,jdbcType=VARCHAR},
      </if>
      <if test="record.extraData != null">
        extra_data = #{record.extraData,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update block
    set `number` = #{record.number,jdbcType=BIGINT},
      hash = #{record.hash,jdbcType=VARCHAR},
      parent_hash = #{record.parentHash,jdbcType=VARCHAR},
      `timestamp` = #{record.timestamp,jdbcType=TIMESTAMP},
      `size` = #{record.size,jdbcType=INTEGER},
      gas_limit = #{record.gasLimit,jdbcType=VARCHAR},
      gas_used = #{record.gasUsed,jdbcType=VARCHAR},
      block_reward = #{record.blockReward,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      node_name = #{record.nodeName,jdbcType=VARCHAR},
      node_id = #{record.nodeId,jdbcType=VARCHAR},
      stat_tx_qty = #{record.statTxQty,jdbcType=INTEGER},
      stat_transfer_qty = #{record.statTransferQty,jdbcType=INTEGER},
      stat_staking_qty = #{record.statStakingQty,jdbcType=INTEGER},
      stat_proposal_qty = #{record.statProposalQty,jdbcType=INTEGER},
      stat_delegate_qty = #{record.statDelegateQty,jdbcType=INTEGER},
      stat_tx_gas_limit = #{record.statTxGasLimit,jdbcType=VARCHAR},
      stat_tx_fee = #{record.statTxFee,jdbcType=VARCHAR},
      miner = #{record.miner,jdbcType=VARCHAR},
      extra_data = #{record.extraData,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update block
    set `number` = #{record.number,jdbcType=BIGINT},
      hash = #{record.hash,jdbcType=VARCHAR},
      parent_hash = #{record.parentHash,jdbcType=VARCHAR},
      `timestamp` = #{record.timestamp,jdbcType=TIMESTAMP},
      `size` = #{record.size,jdbcType=INTEGER},
      gas_limit = #{record.gasLimit,jdbcType=VARCHAR},
      gas_used = #{record.gasUsed,jdbcType=VARCHAR},
      block_reward = #{record.blockReward,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      node_name = #{record.nodeName,jdbcType=VARCHAR},
      node_id = #{record.nodeId,jdbcType=VARCHAR},
      stat_tx_qty = #{record.statTxQty,jdbcType=INTEGER},
      stat_transfer_qty = #{record.statTransferQty,jdbcType=INTEGER},
      stat_staking_qty = #{record.statStakingQty,jdbcType=INTEGER},
      stat_proposal_qty = #{record.statProposalQty,jdbcType=INTEGER},
      stat_delegate_qty = #{record.statDelegateQty,jdbcType=INTEGER},
      stat_tx_gas_limit = #{record.statTxGasLimit,jdbcType=VARCHAR},
      stat_tx_fee = #{record.statTxFee,jdbcType=VARCHAR},
      miner = #{record.miner,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.platon.browser.dao.entity.Block">
    update block
    <set>
      <if test="hash != null">
        hash = #{hash,jdbcType=VARCHAR},
      </if>
      <if test="parentHash != null">
        parent_hash = #{parentHash,jdbcType=VARCHAR},
      </if>
      <if test="timestamp != null">
        `timestamp` = #{timestamp,jdbcType=TIMESTAMP},
      </if>
      <if test="size != null">
        `size` = #{size,jdbcType=INTEGER},
      </if>
      <if test="gasLimit != null">
        gas_limit = #{gasLimit,jdbcType=VARCHAR},
      </if>
      <if test="gasUsed != null">
        gas_used = #{gasUsed,jdbcType=VARCHAR},
      </if>
      <if test="blockReward != null">
        block_reward = #{blockReward,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="nodeName != null">
        node_name = #{nodeName,jdbcType=VARCHAR},
      </if>
      <if test="nodeId != null">
        node_id = #{nodeId,jdbcType=VARCHAR},
      </if>
      <if test="statTxQty != null">
        stat_tx_qty = #{statTxQty,jdbcType=INTEGER},
      </if>
      <if test="statTransferQty != null">
        stat_transfer_qty = #{statTransferQty,jdbcType=INTEGER},
      </if>
      <if test="statStakingQty != null">
        stat_staking_qty = #{statStakingQty,jdbcType=INTEGER},
      </if>
      <if test="statProposalQty != null">
        stat_proposal_qty = #{statProposalQty,jdbcType=INTEGER},
      </if>
      <if test="statDelegateQty != null">
        stat_delegate_qty = #{statDelegateQty,jdbcType=INTEGER},
      </if>
      <if test="statTxGasLimit != null">
        stat_tx_gas_limit = #{statTxGasLimit,jdbcType=VARCHAR},
      </if>
      <if test="statTxFee != null">
        stat_tx_fee = #{statTxFee,jdbcType=VARCHAR},
      </if>
      <if test="miner != null">
        miner = #{miner,jdbcType=VARCHAR},
      </if>
      <if test="extraData != null">
        extra_data = #{extraData,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where `number` = #{number,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.platon.browser.dao.entity.Block">
    update block
    set hash = #{hash,jdbcType=VARCHAR},
      parent_hash = #{parentHash,jdbcType=VARCHAR},
      `timestamp` = #{timestamp,jdbcType=TIMESTAMP},
      `size` = #{size,jdbcType=INTEGER},
      gas_limit = #{gasLimit,jdbcType=VARCHAR},
      gas_used = #{gasUsed,jdbcType=VARCHAR},
      block_reward = #{blockReward,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      node_name = #{nodeName,jdbcType=VARCHAR},
      node_id = #{nodeId,jdbcType=VARCHAR},
      stat_tx_qty = #{statTxQty,jdbcType=INTEGER},
      stat_transfer_qty = #{statTransferQty,jdbcType=INTEGER},
      stat_staking_qty = #{statStakingQty,jdbcType=INTEGER},
      stat_proposal_qty = #{statProposalQty,jdbcType=INTEGER},
      stat_delegate_qty = #{statDelegateQty,jdbcType=INTEGER},
      stat_tx_gas_limit = #{statTxGasLimit,jdbcType=VARCHAR},
      stat_tx_fee = #{statTxFee,jdbcType=VARCHAR},
      miner = #{miner,jdbcType=VARCHAR},
      extra_data = #{extraData,jdbcType=LONGVARCHAR}
    where `number` = #{number,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.platon.browser.dao.entity.Block">
    update block
    set hash = #{hash,jdbcType=VARCHAR},
      parent_hash = #{parentHash,jdbcType=VARCHAR},
      `timestamp` = #{timestamp,jdbcType=TIMESTAMP},
      `size` = #{size,jdbcType=INTEGER},
      gas_limit = #{gasLimit,jdbcType=VARCHAR},
      gas_used = #{gasUsed,jdbcType=VARCHAR},
      block_reward = #{blockReward,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      node_name = #{nodeName,jdbcType=VARCHAR},
      node_id = #{nodeId,jdbcType=VARCHAR},
      stat_tx_qty = #{statTxQty,jdbcType=INTEGER},
      stat_transfer_qty = #{statTransferQty,jdbcType=INTEGER},
      stat_staking_qty = #{statStakingQty,jdbcType=INTEGER},
      stat_proposal_qty = #{statProposalQty,jdbcType=INTEGER},
      stat_delegate_qty = #{statDelegateQty,jdbcType=INTEGER},
      stat_tx_gas_limit = #{statTxGasLimit,jdbcType=VARCHAR},
      stat_tx_fee = #{statTxFee,jdbcType=VARCHAR},
      miner = #{miner,jdbcType=VARCHAR}
    where `number` = #{number,jdbcType=BIGINT}
  </update>
  <insert id="batchInsert" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    insert into block
    (`number`, hash, parent_hash, `timestamp`, `size`, gas_limit, gas_used, block_reward, 
      create_time, update_time, node_name, node_id, stat_tx_qty, stat_transfer_qty, stat_staking_qty, 
      stat_proposal_qty, stat_delegate_qty, stat_tx_gas_limit, stat_tx_fee, miner, extra_data
      )
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.number,jdbcType=BIGINT}, #{item.hash,jdbcType=VARCHAR}, #{item.parentHash,jdbcType=VARCHAR}, 
        #{item.timestamp,jdbcType=TIMESTAMP}, #{item.size,jdbcType=INTEGER}, #{item.gasLimit,jdbcType=VARCHAR}, 
        #{item.gasUsed,jdbcType=VARCHAR}, #{item.blockReward,jdbcType=VARCHAR}, #{item.createTime,jdbcType=TIMESTAMP}, 
        #{item.updateTime,jdbcType=TIMESTAMP}, #{item.nodeName,jdbcType=VARCHAR}, #{item.nodeId,jdbcType=VARCHAR}, 
        #{item.statTxQty,jdbcType=INTEGER}, #{item.statTransferQty,jdbcType=INTEGER}, #{item.statStakingQty,jdbcType=INTEGER}, 
        #{item.statProposalQty,jdbcType=INTEGER}, #{item.statDelegateQty,jdbcType=INTEGER}, 
        #{item.statTxGasLimit,jdbcType=VARCHAR}, #{item.statTxFee,jdbcType=VARCHAR}, #{item.miner,jdbcType=VARCHAR}, 
        #{item.extraData,jdbcType=LONGVARCHAR})
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    insert into block (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'number'.toString() == column.value">
          #{item.number,jdbcType=BIGINT}
        </if>
        <if test="'hash'.toString() == column.value">
          #{item.hash,jdbcType=VARCHAR}
        </if>
        <if test="'parent_hash'.toString() == column.value">
          #{item.parentHash,jdbcType=VARCHAR}
        </if>
        <if test="'timestamp'.toString() == column.value">
          #{item.timestamp,jdbcType=TIMESTAMP}
        </if>
        <if test="'size'.toString() == column.value">
          #{item.size,jdbcType=INTEGER}
        </if>
        <if test="'gas_limit'.toString() == column.value">
          #{item.gasLimit,jdbcType=VARCHAR}
        </if>
        <if test="'gas_used'.toString() == column.value">
          #{item.gasUsed,jdbcType=VARCHAR}
        </if>
        <if test="'block_reward'.toString() == column.value">
          #{item.blockReward,jdbcType=VARCHAR}
        </if>
        <if test="'create_time'.toString() == column.value">
          #{item.createTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'update_time'.toString() == column.value">
          #{item.updateTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'node_name'.toString() == column.value">
          #{item.nodeName,jdbcType=VARCHAR}
        </if>
        <if test="'node_id'.toString() == column.value">
          #{item.nodeId,jdbcType=VARCHAR}
        </if>
        <if test="'stat_tx_qty'.toString() == column.value">
          #{item.statTxQty,jdbcType=INTEGER}
        </if>
        <if test="'stat_transfer_qty'.toString() == column.value">
          #{item.statTransferQty,jdbcType=INTEGER}
        </if>
        <if test="'stat_staking_qty'.toString() == column.value">
          #{item.statStakingQty,jdbcType=INTEGER}
        </if>
        <if test="'stat_proposal_qty'.toString() == column.value">
          #{item.statProposalQty,jdbcType=INTEGER}
        </if>
        <if test="'stat_delegate_qty'.toString() == column.value">
          #{item.statDelegateQty,jdbcType=INTEGER}
        </if>
        <if test="'stat_tx_gas_limit'.toString() == column.value">
          #{item.statTxGasLimit,jdbcType=VARCHAR}
        </if>
        <if test="'stat_tx_fee'.toString() == column.value">
          #{item.statTxFee,jdbcType=VARCHAR}
        </if>
        <if test="'miner'.toString() == column.value">
          #{item.miner,jdbcType=VARCHAR}
        </if>
        <if test="'extra_data'.toString() == column.value">
          #{item.extraData,jdbcType=LONGVARCHAR}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
</mapper>