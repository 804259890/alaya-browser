<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.platon.browser.dao.mapper.BlockMapper">
  <resultMap id="BaseResultMap" type="com.platon.browser.dao.entity.Block">
    <id column="num" jdbcType="BIGINT" property="num" />
    <result column="hash" jdbcType="VARCHAR" property="hash" />
    <result column="p_hash" jdbcType="VARCHAR" property="pHash" />
    <result column="time" jdbcType="TIMESTAMP" property="time" />
    <result column="size" jdbcType="INTEGER" property="size" />
    <result column="gas_limit" jdbcType="DECIMAL" property="gasLimit" />
    <result column="gas_used" jdbcType="DECIMAL" property="gasUsed" />
    <result column="tx_qty" jdbcType="INTEGER" property="txQty" />
    <result column="tran_qty" jdbcType="INTEGER" property="tranQty" />
    <result column="s_qty" jdbcType="INTEGER" property="sQty" />
    <result column="p_qty" jdbcType="INTEGER" property="pQty" />
    <result column="d_qty" jdbcType="INTEGER" property="dQty" />
    <result column="tx_gas_limit" jdbcType="DECIMAL" property="txGasLimit" />
    <result column="tx_fee" jdbcType="DECIMAL" property="txFee" />
    <result column="node_name" jdbcType="VARCHAR" property="nodeName" />
    <result column="node_id" jdbcType="VARCHAR" property="nodeId" />
    <result column="reward" jdbcType="DECIMAL" property="reward" />
    <result column="miner" jdbcType="VARCHAR" property="miner" />
    <result column="cre_time" jdbcType="TIMESTAMP" property="creTime" />
    <result column="upd_time" jdbcType="TIMESTAMP" property="updTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.platon.browser.dao.entity.Block">
    <result column="extra" jdbcType="LONGVARCHAR" property="extra" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    num, hash, p_hash, `time`, `size`, gas_limit, gas_used, tx_qty, tran_qty, s_qty, 
    p_qty, d_qty, tx_gas_limit, tx_fee, node_name, node_id, reward, miner, cre_time, 
    upd_time
  </sql>
  <sql id="Blob_Column_List">
    extra
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.platon.browser.dao.entity.BlockExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from block
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.platon.browser.dao.entity.BlockExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from block
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from block
    where num = #{num,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from block
    where num = #{num,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.platon.browser.dao.entity.BlockExample">
    delete from block
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.platon.browser.dao.entity.Block">
    insert into block (num, hash, p_hash, 
      `time`, `size`, gas_limit, 
      gas_used, tx_qty, tran_qty, 
      s_qty, p_qty, d_qty, tx_gas_limit, 
      tx_fee, node_name, node_id, 
      reward, miner, cre_time, 
      upd_time, extra)
    values (#{num,jdbcType=BIGINT}, #{hash,jdbcType=VARCHAR}, #{pHash,jdbcType=VARCHAR}, 
      #{time,jdbcType=TIMESTAMP}, #{size,jdbcType=INTEGER}, #{gasLimit,jdbcType=DECIMAL}, 
      #{gasUsed,jdbcType=DECIMAL}, #{txQty,jdbcType=INTEGER}, #{tranQty,jdbcType=INTEGER}, 
      #{sQty,jdbcType=INTEGER}, #{pQty,jdbcType=INTEGER}, #{dQty,jdbcType=INTEGER}, #{txGasLimit,jdbcType=DECIMAL}, 
      #{txFee,jdbcType=DECIMAL}, #{nodeName,jdbcType=VARCHAR}, #{nodeId,jdbcType=VARCHAR}, 
      #{reward,jdbcType=DECIMAL}, #{miner,jdbcType=VARCHAR}, #{creTime,jdbcType=TIMESTAMP}, 
      #{updTime,jdbcType=TIMESTAMP}, #{extra,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.platon.browser.dao.entity.Block">
    insert into block
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="num != null">
        num,
      </if>
      <if test="hash != null">
        hash,
      </if>
      <if test="pHash != null">
        p_hash,
      </if>
      <if test="time != null">
        `time`,
      </if>
      <if test="size != null">
        `size`,
      </if>
      <if test="gasLimit != null">
        gas_limit,
      </if>
      <if test="gasUsed != null">
        gas_used,
      </if>
      <if test="txQty != null">
        tx_qty,
      </if>
      <if test="tranQty != null">
        tran_qty,
      </if>
      <if test="sQty != null">
        s_qty,
      </if>
      <if test="pQty != null">
        p_qty,
      </if>
      <if test="dQty != null">
        d_qty,
      </if>
      <if test="txGasLimit != null">
        tx_gas_limit,
      </if>
      <if test="txFee != null">
        tx_fee,
      </if>
      <if test="nodeName != null">
        node_name,
      </if>
      <if test="nodeId != null">
        node_id,
      </if>
      <if test="reward != null">
        reward,
      </if>
      <if test="miner != null">
        miner,
      </if>
      <if test="creTime != null">
        cre_time,
      </if>
      <if test="updTime != null">
        upd_time,
      </if>
      <if test="extra != null">
        extra,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="num != null">
        #{num,jdbcType=BIGINT},
      </if>
      <if test="hash != null">
        #{hash,jdbcType=VARCHAR},
      </if>
      <if test="pHash != null">
        #{pHash,jdbcType=VARCHAR},
      </if>
      <if test="time != null">
        #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="size != null">
        #{size,jdbcType=INTEGER},
      </if>
      <if test="gasLimit != null">
        #{gasLimit,jdbcType=DECIMAL},
      </if>
      <if test="gasUsed != null">
        #{gasUsed,jdbcType=DECIMAL},
      </if>
      <if test="txQty != null">
        #{txQty,jdbcType=INTEGER},
      </if>
      <if test="tranQty != null">
        #{tranQty,jdbcType=INTEGER},
      </if>
      <if test="sQty != null">
        #{sQty,jdbcType=INTEGER},
      </if>
      <if test="pQty != null">
        #{pQty,jdbcType=INTEGER},
      </if>
      <if test="dQty != null">
        #{dQty,jdbcType=INTEGER},
      </if>
      <if test="txGasLimit != null">
        #{txGasLimit,jdbcType=DECIMAL},
      </if>
      <if test="txFee != null">
        #{txFee,jdbcType=DECIMAL},
      </if>
      <if test="nodeName != null">
        #{nodeName,jdbcType=VARCHAR},
      </if>
      <if test="nodeId != null">
        #{nodeId,jdbcType=VARCHAR},
      </if>
      <if test="reward != null">
        #{reward,jdbcType=DECIMAL},
      </if>
      <if test="miner != null">
        #{miner,jdbcType=VARCHAR},
      </if>
      <if test="creTime != null">
        #{creTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updTime != null">
        #{updTime,jdbcType=TIMESTAMP},
      </if>
      <if test="extra != null">
        #{extra,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.platon.browser.dao.entity.BlockExample" resultType="java.lang.Long">
    select count(*) from block
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update block
    <set>
      <if test="record.num != null">
        num = #{record.num,jdbcType=BIGINT},
      </if>
      <if test="record.hash != null">
        hash = #{record.hash,jdbcType=VARCHAR},
      </if>
      <if test="record.pHash != null">
        p_hash = #{record.pHash,jdbcType=VARCHAR},
      </if>
      <if test="record.time != null">
        `time` = #{record.time,jdbcType=TIMESTAMP},
      </if>
      <if test="record.size != null">
        `size` = #{record.size,jdbcType=INTEGER},
      </if>
      <if test="record.gasLimit != null">
        gas_limit = #{record.gasLimit,jdbcType=DECIMAL},
      </if>
      <if test="record.gasUsed != null">
        gas_used = #{record.gasUsed,jdbcType=DECIMAL},
      </if>
      <if test="record.txQty != null">
        tx_qty = #{record.txQty,jdbcType=INTEGER},
      </if>
      <if test="record.tranQty != null">
        tran_qty = #{record.tranQty,jdbcType=INTEGER},
      </if>
      <if test="record.sQty != null">
        s_qty = #{record.sQty,jdbcType=INTEGER},
      </if>
      <if test="record.pQty != null">
        p_qty = #{record.pQty,jdbcType=INTEGER},
      </if>
      <if test="record.dQty != null">
        d_qty = #{record.dQty,jdbcType=INTEGER},
      </if>
      <if test="record.txGasLimit != null">
        tx_gas_limit = #{record.txGasLimit,jdbcType=DECIMAL},
      </if>
      <if test="record.txFee != null">
        tx_fee = #{record.txFee,jdbcType=DECIMAL},
      </if>
      <if test="record.nodeName != null">
        node_name = #{record.nodeName,jdbcType=VARCHAR},
      </if>
      <if test="record.nodeId != null">
        node_id = #{record.nodeId,jdbcType=VARCHAR},
      </if>
      <if test="record.reward != null">
        reward = #{record.reward,jdbcType=DECIMAL},
      </if>
      <if test="record.miner != null">
        miner = #{record.miner,jdbcType=VARCHAR},
      </if>
      <if test="record.creTime != null">
        cre_time = #{record.creTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updTime != null">
        upd_time = #{record.updTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.extra != null">
        extra = #{record.extra,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update block
    set num = #{record.num,jdbcType=BIGINT},
      hash = #{record.hash,jdbcType=VARCHAR},
      p_hash = #{record.pHash,jdbcType=VARCHAR},
      `time` = #{record.time,jdbcType=TIMESTAMP},
      `size` = #{record.size,jdbcType=INTEGER},
      gas_limit = #{record.gasLimit,jdbcType=DECIMAL},
      gas_used = #{record.gasUsed,jdbcType=DECIMAL},
      tx_qty = #{record.txQty,jdbcType=INTEGER},
      tran_qty = #{record.tranQty,jdbcType=INTEGER},
      s_qty = #{record.sQty,jdbcType=INTEGER},
      p_qty = #{record.pQty,jdbcType=INTEGER},
      d_qty = #{record.dQty,jdbcType=INTEGER},
      tx_gas_limit = #{record.txGasLimit,jdbcType=DECIMAL},
      tx_fee = #{record.txFee,jdbcType=DECIMAL},
      node_name = #{record.nodeName,jdbcType=VARCHAR},
      node_id = #{record.nodeId,jdbcType=VARCHAR},
      reward = #{record.reward,jdbcType=DECIMAL},
      miner = #{record.miner,jdbcType=VARCHAR},
      cre_time = #{record.creTime,jdbcType=TIMESTAMP},
      upd_time = #{record.updTime,jdbcType=TIMESTAMP},
      extra = #{record.extra,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update block
    set num = #{record.num,jdbcType=BIGINT},
      hash = #{record.hash,jdbcType=VARCHAR},
      p_hash = #{record.pHash,jdbcType=VARCHAR},
      `time` = #{record.time,jdbcType=TIMESTAMP},
      `size` = #{record.size,jdbcType=INTEGER},
      gas_limit = #{record.gasLimit,jdbcType=DECIMAL},
      gas_used = #{record.gasUsed,jdbcType=DECIMAL},
      tx_qty = #{record.txQty,jdbcType=INTEGER},
      tran_qty = #{record.tranQty,jdbcType=INTEGER},
      s_qty = #{record.sQty,jdbcType=INTEGER},
      p_qty = #{record.pQty,jdbcType=INTEGER},
      d_qty = #{record.dQty,jdbcType=INTEGER},
      tx_gas_limit = #{record.txGasLimit,jdbcType=DECIMAL},
      tx_fee = #{record.txFee,jdbcType=DECIMAL},
      node_name = #{record.nodeName,jdbcType=VARCHAR},
      node_id = #{record.nodeId,jdbcType=VARCHAR},
      reward = #{record.reward,jdbcType=DECIMAL},
      miner = #{record.miner,jdbcType=VARCHAR},
      cre_time = #{record.creTime,jdbcType=TIMESTAMP},
      upd_time = #{record.updTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.platon.browser.dao.entity.Block">
    update block
    <set>
      <if test="hash != null">
        hash = #{hash,jdbcType=VARCHAR},
      </if>
      <if test="pHash != null">
        p_hash = #{pHash,jdbcType=VARCHAR},
      </if>
      <if test="time != null">
        `time` = #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="size != null">
        `size` = #{size,jdbcType=INTEGER},
      </if>
      <if test="gasLimit != null">
        gas_limit = #{gasLimit,jdbcType=DECIMAL},
      </if>
      <if test="gasUsed != null">
        gas_used = #{gasUsed,jdbcType=DECIMAL},
      </if>
      <if test="txQty != null">
        tx_qty = #{txQty,jdbcType=INTEGER},
      </if>
      <if test="tranQty != null">
        tran_qty = #{tranQty,jdbcType=INTEGER},
      </if>
      <if test="sQty != null">
        s_qty = #{sQty,jdbcType=INTEGER},
      </if>
      <if test="pQty != null">
        p_qty = #{pQty,jdbcType=INTEGER},
      </if>
      <if test="dQty != null">
        d_qty = #{dQty,jdbcType=INTEGER},
      </if>
      <if test="txGasLimit != null">
        tx_gas_limit = #{txGasLimit,jdbcType=DECIMAL},
      </if>
      <if test="txFee != null">
        tx_fee = #{txFee,jdbcType=DECIMAL},
      </if>
      <if test="nodeName != null">
        node_name = #{nodeName,jdbcType=VARCHAR},
      </if>
      <if test="nodeId != null">
        node_id = #{nodeId,jdbcType=VARCHAR},
      </if>
      <if test="reward != null">
        reward = #{reward,jdbcType=DECIMAL},
      </if>
      <if test="miner != null">
        miner = #{miner,jdbcType=VARCHAR},
      </if>
      <if test="creTime != null">
        cre_time = #{creTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updTime != null">
        upd_time = #{updTime,jdbcType=TIMESTAMP},
      </if>
      <if test="extra != null">
        extra = #{extra,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where num = #{num,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.platon.browser.dao.entity.Block">
    update block
    set hash = #{hash,jdbcType=VARCHAR},
      p_hash = #{pHash,jdbcType=VARCHAR},
      `time` = #{time,jdbcType=TIMESTAMP},
      `size` = #{size,jdbcType=INTEGER},
      gas_limit = #{gasLimit,jdbcType=DECIMAL},
      gas_used = #{gasUsed,jdbcType=DECIMAL},
      tx_qty = #{txQty,jdbcType=INTEGER},
      tran_qty = #{tranQty,jdbcType=INTEGER},
      s_qty = #{sQty,jdbcType=INTEGER},
      p_qty = #{pQty,jdbcType=INTEGER},
      d_qty = #{dQty,jdbcType=INTEGER},
      tx_gas_limit = #{txGasLimit,jdbcType=DECIMAL},
      tx_fee = #{txFee,jdbcType=DECIMAL},
      node_name = #{nodeName,jdbcType=VARCHAR},
      node_id = #{nodeId,jdbcType=VARCHAR},
      reward = #{reward,jdbcType=DECIMAL},
      miner = #{miner,jdbcType=VARCHAR},
      cre_time = #{creTime,jdbcType=TIMESTAMP},
      upd_time = #{updTime,jdbcType=TIMESTAMP},
      extra = #{extra,jdbcType=LONGVARCHAR}
    where num = #{num,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.platon.browser.dao.entity.Block">
    update block
    set hash = #{hash,jdbcType=VARCHAR},
      p_hash = #{pHash,jdbcType=VARCHAR},
      `time` = #{time,jdbcType=TIMESTAMP},
      `size` = #{size,jdbcType=INTEGER},
      gas_limit = #{gasLimit,jdbcType=DECIMAL},
      gas_used = #{gasUsed,jdbcType=DECIMAL},
      tx_qty = #{txQty,jdbcType=INTEGER},
      tran_qty = #{tranQty,jdbcType=INTEGER},
      s_qty = #{sQty,jdbcType=INTEGER},
      p_qty = #{pQty,jdbcType=INTEGER},
      d_qty = #{dQty,jdbcType=INTEGER},
      tx_gas_limit = #{txGasLimit,jdbcType=DECIMAL},
      tx_fee = #{txFee,jdbcType=DECIMAL},
      node_name = #{nodeName,jdbcType=VARCHAR},
      node_id = #{nodeId,jdbcType=VARCHAR},
      reward = #{reward,jdbcType=DECIMAL},
      miner = #{miner,jdbcType=VARCHAR},
      cre_time = #{creTime,jdbcType=TIMESTAMP},
      upd_time = #{updTime,jdbcType=TIMESTAMP}
    where num = #{num,jdbcType=BIGINT}
  </update>
  <insert id="batchInsert" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    insert into block
    (num, hash, p_hash, `time`, `size`, gas_limit, gas_used, tx_qty, tran_qty, s_qty, 
      p_qty, d_qty, tx_gas_limit, tx_fee, node_name, node_id, reward, miner, cre_time, 
      upd_time, extra)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.num,jdbcType=BIGINT}, #{item.hash,jdbcType=VARCHAR}, #{item.pHash,jdbcType=VARCHAR}, 
        #{item.time,jdbcType=TIMESTAMP}, #{item.size,jdbcType=INTEGER}, #{item.gasLimit,jdbcType=DECIMAL}, 
        #{item.gasUsed,jdbcType=DECIMAL}, #{item.txQty,jdbcType=INTEGER}, #{item.tranQty,jdbcType=INTEGER}, 
        #{item.sQty,jdbcType=INTEGER}, #{item.pQty,jdbcType=INTEGER}, #{item.dQty,jdbcType=INTEGER}, 
        #{item.txGasLimit,jdbcType=DECIMAL}, #{item.txFee,jdbcType=DECIMAL}, #{item.nodeName,jdbcType=VARCHAR}, 
        #{item.nodeId,jdbcType=VARCHAR}, #{item.reward,jdbcType=DECIMAL}, #{item.miner,jdbcType=VARCHAR}, 
        #{item.creTime,jdbcType=TIMESTAMP}, #{item.updTime,jdbcType=TIMESTAMP}, #{item.extra,jdbcType=LONGVARCHAR}
        )
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    insert into block (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'num'.toString() == column.value">
          #{item.num,jdbcType=BIGINT}
        </if>
        <if test="'hash'.toString() == column.value">
          #{item.hash,jdbcType=VARCHAR}
        </if>
        <if test="'p_hash'.toString() == column.value">
          #{item.pHash,jdbcType=VARCHAR}
        </if>
        <if test="'time'.toString() == column.value">
          #{item.time,jdbcType=TIMESTAMP}
        </if>
        <if test="'size'.toString() == column.value">
          #{item.size,jdbcType=INTEGER}
        </if>
        <if test="'gas_limit'.toString() == column.value">
          #{item.gasLimit,jdbcType=DECIMAL}
        </if>
        <if test="'gas_used'.toString() == column.value">
          #{item.gasUsed,jdbcType=DECIMAL}
        </if>
        <if test="'tx_qty'.toString() == column.value">
          #{item.txQty,jdbcType=INTEGER}
        </if>
        <if test="'tran_qty'.toString() == column.value">
          #{item.tranQty,jdbcType=INTEGER}
        </if>
        <if test="'s_qty'.toString() == column.value">
          #{item.sQty,jdbcType=INTEGER}
        </if>
        <if test="'p_qty'.toString() == column.value">
          #{item.pQty,jdbcType=INTEGER}
        </if>
        <if test="'d_qty'.toString() == column.value">
          #{item.dQty,jdbcType=INTEGER}
        </if>
        <if test="'tx_gas_limit'.toString() == column.value">
          #{item.txGasLimit,jdbcType=DECIMAL}
        </if>
        <if test="'tx_fee'.toString() == column.value">
          #{item.txFee,jdbcType=DECIMAL}
        </if>
        <if test="'node_name'.toString() == column.value">
          #{item.nodeName,jdbcType=VARCHAR}
        </if>
        <if test="'node_id'.toString() == column.value">
          #{item.nodeId,jdbcType=VARCHAR}
        </if>
        <if test="'reward'.toString() == column.value">
          #{item.reward,jdbcType=DECIMAL}
        </if>
        <if test="'miner'.toString() == column.value">
          #{item.miner,jdbcType=VARCHAR}
        </if>
        <if test="'cre_time'.toString() == column.value">
          #{item.creTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'upd_time'.toString() == column.value">
          #{item.updTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'extra'.toString() == column.value">
          #{item.extra,jdbcType=LONGVARCHAR}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
</mapper>