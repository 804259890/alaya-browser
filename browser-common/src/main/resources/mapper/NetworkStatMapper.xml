<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.platon.browser.dao.mapper.NetworkStatMapper">
  <resultMap id="BaseResultMap" type="com.platon.browser.dao.entity.NetworkStat">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="current_number" jdbcType="BIGINT" property="currentNumber" />
    <result column="node_name" jdbcType="VARCHAR" property="nodeName" />
    <result column="node_id" jdbcType="VARCHAR" property="nodeId" />
    <result column="tx_qty" jdbcType="INTEGER" property="txQty" />
    <result column="current_tps" jdbcType="INTEGER" property="currentTps" />
    <result column="max_tps" jdbcType="INTEGER" property="maxTps" />
    <result column="issue_value" jdbcType="VARCHAR" property="issueValue" />
    <result column="turn_value" jdbcType="VARCHAR" property="turnValue" />
    <result column="staking_delegation_value" jdbcType="VARCHAR" property="stakingDelegationValue" />
    <result column="staking_value" jdbcType="VARCHAR" property="stakingValue" />
    <result column="proposal_qty" jdbcType="INTEGER" property="proposalQty" />
    <result column="doing_proposal_qty" jdbcType="INTEGER" property="doingProposalQty" />
    <result column="address_qty" jdbcType="INTEGER" property="addressQty" />
    <result column="block_reward" jdbcType="VARCHAR" property="blockReward" />
    <result column="staking_reward" jdbcType="VARCHAR" property="stakingReward" />
    <result column="add_issue_begin" jdbcType="BIGINT" property="addIssueBegin" />
    <result column="add_issue_end" jdbcType="BIGINT" property="addIssueEnd" />
    <result column="next_setting" jdbcType="BIGINT" property="nextSetting" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, current_number, node_name, node_id, tx_qty, current_tps, max_tps, issue_value, 
    turn_value, staking_delegation_value, staking_value, proposal_qty, doing_proposal_qty, 
    address_qty, block_reward, staking_reward, add_issue_begin, add_issue_end, next_setting, 
    create_time, update_time
  </sql>
  <select id="selectByExample" parameterType="com.platon.browser.dao.entity.NetworkStatExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from network_stat
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from network_stat
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from network_stat
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.platon.browser.dao.entity.NetworkStatExample">
    delete from network_stat
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.platon.browser.dao.entity.NetworkStat">
    insert into network_stat (id, current_number, node_name, 
      node_id, tx_qty, current_tps, 
      max_tps, issue_value, turn_value, 
      staking_delegation_value, staking_value, proposal_qty, 
      doing_proposal_qty, address_qty, block_reward, 
      staking_reward, add_issue_begin, add_issue_end, 
      next_setting, create_time, update_time
      )
    values (#{id,jdbcType=INTEGER}, #{currentNumber,jdbcType=BIGINT}, #{nodeName,jdbcType=VARCHAR}, 
      #{nodeId,jdbcType=VARCHAR}, #{txQty,jdbcType=INTEGER}, #{currentTps,jdbcType=INTEGER}, 
      #{maxTps,jdbcType=INTEGER}, #{issueValue,jdbcType=VARCHAR}, #{turnValue,jdbcType=VARCHAR}, 
      #{stakingDelegationValue,jdbcType=VARCHAR}, #{stakingValue,jdbcType=VARCHAR}, #{proposalQty,jdbcType=INTEGER}, 
      #{doingProposalQty,jdbcType=INTEGER}, #{addressQty,jdbcType=INTEGER}, #{blockReward,jdbcType=VARCHAR}, 
      #{stakingReward,jdbcType=VARCHAR}, #{addIssueBegin,jdbcType=BIGINT}, #{addIssueEnd,jdbcType=BIGINT}, 
      #{nextSetting,jdbcType=BIGINT}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.platon.browser.dao.entity.NetworkStat">
    insert into network_stat
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="currentNumber != null">
        current_number,
      </if>
      <if test="nodeName != null">
        node_name,
      </if>
      <if test="nodeId != null">
        node_id,
      </if>
      <if test="txQty != null">
        tx_qty,
      </if>
      <if test="currentTps != null">
        current_tps,
      </if>
      <if test="maxTps != null">
        max_tps,
      </if>
      <if test="issueValue != null">
        issue_value,
      </if>
      <if test="turnValue != null">
        turn_value,
      </if>
      <if test="stakingDelegationValue != null">
        staking_delegation_value,
      </if>
      <if test="stakingValue != null">
        staking_value,
      </if>
      <if test="proposalQty != null">
        proposal_qty,
      </if>
      <if test="doingProposalQty != null">
        doing_proposal_qty,
      </if>
      <if test="addressQty != null">
        address_qty,
      </if>
      <if test="blockReward != null">
        block_reward,
      </if>
      <if test="stakingReward != null">
        staking_reward,
      </if>
      <if test="addIssueBegin != null">
        add_issue_begin,
      </if>
      <if test="addIssueEnd != null">
        add_issue_end,
      </if>
      <if test="nextSetting != null">
        next_setting,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="currentNumber != null">
        #{currentNumber,jdbcType=BIGINT},
      </if>
      <if test="nodeName != null">
        #{nodeName,jdbcType=VARCHAR},
      </if>
      <if test="nodeId != null">
        #{nodeId,jdbcType=VARCHAR},
      </if>
      <if test="txQty != null">
        #{txQty,jdbcType=INTEGER},
      </if>
      <if test="currentTps != null">
        #{currentTps,jdbcType=INTEGER},
      </if>
      <if test="maxTps != null">
        #{maxTps,jdbcType=INTEGER},
      </if>
      <if test="issueValue != null">
        #{issueValue,jdbcType=VARCHAR},
      </if>
      <if test="turnValue != null">
        #{turnValue,jdbcType=VARCHAR},
      </if>
      <if test="stakingDelegationValue != null">
        #{stakingDelegationValue,jdbcType=VARCHAR},
      </if>
      <if test="stakingValue != null">
        #{stakingValue,jdbcType=VARCHAR},
      </if>
      <if test="proposalQty != null">
        #{proposalQty,jdbcType=INTEGER},
      </if>
      <if test="doingProposalQty != null">
        #{doingProposalQty,jdbcType=INTEGER},
      </if>
      <if test="addressQty != null">
        #{addressQty,jdbcType=INTEGER},
      </if>
      <if test="blockReward != null">
        #{blockReward,jdbcType=VARCHAR},
      </if>
      <if test="stakingReward != null">
        #{stakingReward,jdbcType=VARCHAR},
      </if>
      <if test="addIssueBegin != null">
        #{addIssueBegin,jdbcType=BIGINT},
      </if>
      <if test="addIssueEnd != null">
        #{addIssueEnd,jdbcType=BIGINT},
      </if>
      <if test="nextSetting != null">
        #{nextSetting,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.platon.browser.dao.entity.NetworkStatExample" resultType="java.lang.Long">
    select count(*) from network_stat
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update network_stat
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.currentNumber != null">
        current_number = #{record.currentNumber,jdbcType=BIGINT},
      </if>
      <if test="record.nodeName != null">
        node_name = #{record.nodeName,jdbcType=VARCHAR},
      </if>
      <if test="record.nodeId != null">
        node_id = #{record.nodeId,jdbcType=VARCHAR},
      </if>
      <if test="record.txQty != null">
        tx_qty = #{record.txQty,jdbcType=INTEGER},
      </if>
      <if test="record.currentTps != null">
        current_tps = #{record.currentTps,jdbcType=INTEGER},
      </if>
      <if test="record.maxTps != null">
        max_tps = #{record.maxTps,jdbcType=INTEGER},
      </if>
      <if test="record.issueValue != null">
        issue_value = #{record.issueValue,jdbcType=VARCHAR},
      </if>
      <if test="record.turnValue != null">
        turn_value = #{record.turnValue,jdbcType=VARCHAR},
      </if>
      <if test="record.stakingDelegationValue != null">
        staking_delegation_value = #{record.stakingDelegationValue,jdbcType=VARCHAR},
      </if>
      <if test="record.stakingValue != null">
        staking_value = #{record.stakingValue,jdbcType=VARCHAR},
      </if>
      <if test="record.proposalQty != null">
        proposal_qty = #{record.proposalQty,jdbcType=INTEGER},
      </if>
      <if test="record.doingProposalQty != null">
        doing_proposal_qty = #{record.doingProposalQty,jdbcType=INTEGER},
      </if>
      <if test="record.addressQty != null">
        address_qty = #{record.addressQty,jdbcType=INTEGER},
      </if>
      <if test="record.blockReward != null">
        block_reward = #{record.blockReward,jdbcType=VARCHAR},
      </if>
      <if test="record.stakingReward != null">
        staking_reward = #{record.stakingReward,jdbcType=VARCHAR},
      </if>
      <if test="record.addIssueBegin != null">
        add_issue_begin = #{record.addIssueBegin,jdbcType=BIGINT},
      </if>
      <if test="record.addIssueEnd != null">
        add_issue_end = #{record.addIssueEnd,jdbcType=BIGINT},
      </if>
      <if test="record.nextSetting != null">
        next_setting = #{record.nextSetting,jdbcType=BIGINT},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update network_stat
    set id = #{record.id,jdbcType=INTEGER},
      current_number = #{record.currentNumber,jdbcType=BIGINT},
      node_name = #{record.nodeName,jdbcType=VARCHAR},
      node_id = #{record.nodeId,jdbcType=VARCHAR},
      tx_qty = #{record.txQty,jdbcType=INTEGER},
      current_tps = #{record.currentTps,jdbcType=INTEGER},
      max_tps = #{record.maxTps,jdbcType=INTEGER},
      issue_value = #{record.issueValue,jdbcType=VARCHAR},
      turn_value = #{record.turnValue,jdbcType=VARCHAR},
      staking_delegation_value = #{record.stakingDelegationValue,jdbcType=VARCHAR},
      staking_value = #{record.stakingValue,jdbcType=VARCHAR},
      proposal_qty = #{record.proposalQty,jdbcType=INTEGER},
      doing_proposal_qty = #{record.doingProposalQty,jdbcType=INTEGER},
      address_qty = #{record.addressQty,jdbcType=INTEGER},
      block_reward = #{record.blockReward,jdbcType=VARCHAR},
      staking_reward = #{record.stakingReward,jdbcType=VARCHAR},
      add_issue_begin = #{record.addIssueBegin,jdbcType=BIGINT},
      add_issue_end = #{record.addIssueEnd,jdbcType=BIGINT},
      next_setting = #{record.nextSetting,jdbcType=BIGINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.platon.browser.dao.entity.NetworkStat">
    update network_stat
    <set>
      <if test="currentNumber != null">
        current_number = #{currentNumber,jdbcType=BIGINT},
      </if>
      <if test="nodeName != null">
        node_name = #{nodeName,jdbcType=VARCHAR},
      </if>
      <if test="nodeId != null">
        node_id = #{nodeId,jdbcType=VARCHAR},
      </if>
      <if test="txQty != null">
        tx_qty = #{txQty,jdbcType=INTEGER},
      </if>
      <if test="currentTps != null">
        current_tps = #{currentTps,jdbcType=INTEGER},
      </if>
      <if test="maxTps != null">
        max_tps = #{maxTps,jdbcType=INTEGER},
      </if>
      <if test="issueValue != null">
        issue_value = #{issueValue,jdbcType=VARCHAR},
      </if>
      <if test="turnValue != null">
        turn_value = #{turnValue,jdbcType=VARCHAR},
      </if>
      <if test="stakingDelegationValue != null">
        staking_delegation_value = #{stakingDelegationValue,jdbcType=VARCHAR},
      </if>
      <if test="stakingValue != null">
        staking_value = #{stakingValue,jdbcType=VARCHAR},
      </if>
      <if test="proposalQty != null">
        proposal_qty = #{proposalQty,jdbcType=INTEGER},
      </if>
      <if test="doingProposalQty != null">
        doing_proposal_qty = #{doingProposalQty,jdbcType=INTEGER},
      </if>
      <if test="addressQty != null">
        address_qty = #{addressQty,jdbcType=INTEGER},
      </if>
      <if test="blockReward != null">
        block_reward = #{blockReward,jdbcType=VARCHAR},
      </if>
      <if test="stakingReward != null">
        staking_reward = #{stakingReward,jdbcType=VARCHAR},
      </if>
      <if test="addIssueBegin != null">
        add_issue_begin = #{addIssueBegin,jdbcType=BIGINT},
      </if>
      <if test="addIssueEnd != null">
        add_issue_end = #{addIssueEnd,jdbcType=BIGINT},
      </if>
      <if test="nextSetting != null">
        next_setting = #{nextSetting,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.platon.browser.dao.entity.NetworkStat">
    update network_stat
    set current_number = #{currentNumber,jdbcType=BIGINT},
      node_name = #{nodeName,jdbcType=VARCHAR},
      node_id = #{nodeId,jdbcType=VARCHAR},
      tx_qty = #{txQty,jdbcType=INTEGER},
      current_tps = #{currentTps,jdbcType=INTEGER},
      max_tps = #{maxTps,jdbcType=INTEGER},
      issue_value = #{issueValue,jdbcType=VARCHAR},
      turn_value = #{turnValue,jdbcType=VARCHAR},
      staking_delegation_value = #{stakingDelegationValue,jdbcType=VARCHAR},
      staking_value = #{stakingValue,jdbcType=VARCHAR},
      proposal_qty = #{proposalQty,jdbcType=INTEGER},
      doing_proposal_qty = #{doingProposalQty,jdbcType=INTEGER},
      address_qty = #{addressQty,jdbcType=INTEGER},
      block_reward = #{blockReward,jdbcType=VARCHAR},
      staking_reward = #{stakingReward,jdbcType=VARCHAR},
      add_issue_begin = #{addIssueBegin,jdbcType=BIGINT},
      add_issue_end = #{addIssueEnd,jdbcType=BIGINT},
      next_setting = #{nextSetting,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <insert id="batchInsert" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    insert into network_stat
    (id, current_number, node_name, node_id, tx_qty, current_tps, max_tps, issue_value, 
      turn_value, staking_delegation_value, staking_value, proposal_qty, doing_proposal_qty, 
      address_qty, block_reward, staking_reward, add_issue_begin, add_issue_end, next_setting, 
      create_time, update_time)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.id,jdbcType=INTEGER}, #{item.currentNumber,jdbcType=BIGINT}, #{item.nodeName,jdbcType=VARCHAR}, 
        #{item.nodeId,jdbcType=VARCHAR}, #{item.txQty,jdbcType=INTEGER}, #{item.currentTps,jdbcType=INTEGER}, 
        #{item.maxTps,jdbcType=INTEGER}, #{item.issueValue,jdbcType=VARCHAR}, #{item.turnValue,jdbcType=VARCHAR}, 
        #{item.stakingDelegationValue,jdbcType=VARCHAR}, #{item.stakingValue,jdbcType=VARCHAR}, 
        #{item.proposalQty,jdbcType=INTEGER}, #{item.doingProposalQty,jdbcType=INTEGER}, 
        #{item.addressQty,jdbcType=INTEGER}, #{item.blockReward,jdbcType=VARCHAR}, #{item.stakingReward,jdbcType=VARCHAR}, 
        #{item.addIssueBegin,jdbcType=BIGINT}, #{item.addIssueEnd,jdbcType=BIGINT}, #{item.nextSetting,jdbcType=BIGINT}, 
        #{item.createTime,jdbcType=TIMESTAMP}, #{item.updateTime,jdbcType=TIMESTAMP})
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    insert into network_stat (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'id'.toString() == column.value">
          #{item.id,jdbcType=INTEGER}
        </if>
        <if test="'current_number'.toString() == column.value">
          #{item.currentNumber,jdbcType=BIGINT}
        </if>
        <if test="'node_name'.toString() == column.value">
          #{item.nodeName,jdbcType=VARCHAR}
        </if>
        <if test="'node_id'.toString() == column.value">
          #{item.nodeId,jdbcType=VARCHAR}
        </if>
        <if test="'tx_qty'.toString() == column.value">
          #{item.txQty,jdbcType=INTEGER}
        </if>
        <if test="'current_tps'.toString() == column.value">
          #{item.currentTps,jdbcType=INTEGER}
        </if>
        <if test="'max_tps'.toString() == column.value">
          #{item.maxTps,jdbcType=INTEGER}
        </if>
        <if test="'issue_value'.toString() == column.value">
          #{item.issueValue,jdbcType=VARCHAR}
        </if>
        <if test="'turn_value'.toString() == column.value">
          #{item.turnValue,jdbcType=VARCHAR}
        </if>
        <if test="'staking_delegation_value'.toString() == column.value">
          #{item.stakingDelegationValue,jdbcType=VARCHAR}
        </if>
        <if test="'staking_value'.toString() == column.value">
          #{item.stakingValue,jdbcType=VARCHAR}
        </if>
        <if test="'proposal_qty'.toString() == column.value">
          #{item.proposalQty,jdbcType=INTEGER}
        </if>
        <if test="'doing_proposal_qty'.toString() == column.value">
          #{item.doingProposalQty,jdbcType=INTEGER}
        </if>
        <if test="'address_qty'.toString() == column.value">
          #{item.addressQty,jdbcType=INTEGER}
        </if>
        <if test="'block_reward'.toString() == column.value">
          #{item.blockReward,jdbcType=VARCHAR}
        </if>
        <if test="'staking_reward'.toString() == column.value">
          #{item.stakingReward,jdbcType=VARCHAR}
        </if>
        <if test="'add_issue_begin'.toString() == column.value">
          #{item.addIssueBegin,jdbcType=BIGINT}
        </if>
        <if test="'add_issue_end'.toString() == column.value">
          #{item.addIssueEnd,jdbcType=BIGINT}
        </if>
        <if test="'next_setting'.toString() == column.value">
          #{item.nextSetting,jdbcType=BIGINT}
        </if>
        <if test="'create_time'.toString() == column.value">
          #{item.createTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'update_time'.toString() == column.value">
          #{item.updateTime,jdbcType=TIMESTAMP}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
</mapper>